{"version":3,"file":"canvas-select.min.js","sources":["../src/tools.ts","../src/shape/Shape.ts","../src/index.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/EventBus.ts","../src/shape/Line.ts","../src/shape/Circle.ts","../src/shape/Grid.ts","../src/shape/Brush.ts","../src/shape/Mask.ts","../src/shape/Pencil.ts"],"sourcesContent":["import Shape from \"./shape/Shape\";\r\n\r\nexport function createUuid(): string {\r\n  const s: any[] = [];\r\n  const hexDigits = \"0123456789abcdef\";\r\n  for (let i = 0; i < 36; i++) {\r\n    const m = Math.floor(Math.random() * 0x10);\r\n    s[i] = hexDigits.slice(m, m + 1);\r\n  }\r\n  s[14] = \"4\";\r\n  const n = (s[19] & 0x3) | 0x8;\r\n  s[19] = hexDigits.slice(n, n + 1);\r\n  s[8] = s[13] = s[18] = s[23] = \"-\";\r\n  const uuid = s.join(\"\");\r\n  return uuid;\r\n}\r\n\r\n/**\r\n * 判断图形是否符合嵌套关系, 业务需求：只需要判断shape2所有的点是否都在shape1内部即可\r\n * @param shape1 参数1\r\n * @param shape2 参数2\r\n * @reutrn Boolean 符合条件返回true 否则返回false\r\n */\r\n\r\nexport function isNested(shape1: any, shape2: any): boolean {\r\n  if (shape1.type === 1 && shape2.type === 1) {\r\n    // 矩形和矩形的判断逻辑\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const [[x3, y3], [x4, y4]] = shape2.coor;\r\n\r\n    // if (x1 >= x3 && y1 >= y3 && x2 <= x4 && y2 <= y4) {\r\n    //   return true; // shape1 嵌套在 shape2 内部\r\n    // } else\r\n    if (x1 <= x3 && y1 <= y3 && x2 >= x4 && y2 >= y4) {\r\n      return true; // shape2 嵌套在 shape1 内部\r\n    } else {\r\n      return false; // 两个矩形没有嵌套关系\r\n    }\r\n  } else if (shape1.type === 1 && shape2.type === 2) {\r\n    // 矩形和多边形的判断逻辑，确保多边形所有的坐标点都在矩形里面\r\n    const [[x1, y1], [x2, y2]] = shape1.coor;\r\n    const vertices = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n        return false; // 多边形的顶点在矩形外部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 所有顶点都在矩形内部，嵌套关系成立\r\n  } else if (shape1.type === 2 && shape2.type === 1) {\r\n    // 多边形和矩形的判断逻辑，确保矩形的所有坐标点都在多边形里面\r\n    const vertices = shape2.coor; // 矩形的顶点坐标\r\n\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const [x, y] = vertices[i];\r\n      if (!isPointInPolygon(x, y, shape1.coor)) {\r\n        return false; // 有一个坐标点不在多边形范围内，返回false\r\n      }\r\n    }\r\n\r\n    return true; // 所有坐标点都在多边形内部，返回true\r\n  } else if (shape1.type === 2 && shape2.type === 2) {\r\n    // 多边形和多边形的判断逻辑\r\n    const vertices1 = shape1.coor;\r\n    const vertices2 = shape2.coor;\r\n\r\n    for (let i = 0; i < vertices2.length; i++) {\r\n      const [x, y] = vertices2[i];\r\n      if (!isPointInPolygon(x, y, vertices1)) {\r\n        return false; // 多边形2的顶点不都在多边形1内部，不嵌套\r\n      }\r\n    }\r\n\r\n    return true; // 有坐标点都在多边形内部，返回true\r\n  }\r\n}\r\n\r\nfunction isPointInPolygon(x: number, y: number, vertices: any) {\r\n  let inside = false;\r\n  const n = vertices.length;\r\n\r\n  for (let i = 0, j = n - 1; i < n; j = i++) {\r\n    const xi = vertices[i][0];\r\n    const yi = vertices[i][1];\r\n    const xj = vertices[j][0];\r\n    const yj = vertices[j][1];\r\n\r\n    if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\r\n      inside = !inside;\r\n    }\r\n  }\r\n\r\n  return inside;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 深拷贝函数\r\n */\r\nexport function deepClone<T>(obj: T, hash = new WeakMap()): T {\r\n  // 处理原始类型和 null、undefined\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  // 处理循环引用\r\n  if (hash.has(obj)) {\r\n    return hash.get(obj);\r\n  }\r\n\r\n  // 处理 ImageData 对象\r\n  if (obj instanceof ImageData) {\r\n    // 创建一个新的 ImageData 对象，并拷贝其 data 属性\r\n    const newImageData = new ImageData(new Uint8ClampedArray(obj.data), obj.width, obj.height);\r\n    hash.set(obj, newImageData);\r\n    return newImageData as any;\r\n  }\r\n\r\n  // 处理 Date 对象\r\n  if (obj instanceof Date) {\r\n    return new Date(obj.getTime()) as any;\r\n  }\r\n\r\n  // 处理 RegExp 对象\r\n  if (obj instanceof RegExp) {\r\n    return new RegExp(obj.source, obj.flags) as any;\r\n  }\r\n\r\n  // 处理 Map 对象\r\n  if (obj instanceof Map) {\r\n    const result = new Map();\r\n    hash.set(obj, result);\r\n    obj.forEach((value, key) => {\r\n      result.set(deepClone(key, hash), deepClone(value, hash));\r\n    });\r\n    return result as any;\r\n  }\r\n\r\n  // 处理 Set 对象\r\n  if (obj instanceof Set) {\r\n    const result = new Set();\r\n    hash.set(obj, result);\r\n    obj.forEach(value => {\r\n      result.add(deepClone(value, hash));\r\n    });\r\n    return result as any;\r\n  }\r\n\r\n  // 处理数组\r\n  if (Array.isArray(obj)) {\r\n    const result: any[] = [];\r\n    hash.set(obj, result);\r\n    obj.forEach((item, index) => {\r\n      result[index] = deepClone(item, hash);\r\n    });\r\n    return result as T;\r\n  }\r\n\r\n  // 处理对象\r\n  const result = Object.create(Object.getPrototypeOf(obj));\r\n  hash.set(obj, result);\r\n\r\n  Reflect.ownKeys(obj).forEach(key => {\r\n    const value = (obj as any)[key];\r\n    result[key as keyof typeof result] = deepClone(value, hash);\r\n  });\r\n\r\n  return result as T;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * 判断两个对象的某些keys是否相等\r\n */\r\nexport function deepEqual(obj1: any, obj2: any, keysToCompare?: string[]): boolean {\r\n  // 如果两个对象或数组引用相同，直接返回 true\r\n  if (obj1 === obj2) return true;\r\n\r\n  // 如果 obj1 和 obj2 的 type 都为 8(Mask)，比较特定属性值\r\n  if (obj1.type === 8 && obj2.type === 8) {\r\n    const maskKeysToCompare = ['uuid', 'label', 'maskBase64'];\r\n    for (let key of maskKeysToCompare) {\r\n      if (obj1[key] !== obj2[key]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true; // 如果 uuid, label, maskBase64 都相等，返回 true\r\n  }\r\n\r\n  // 检查是否为对象或数组\r\n  if (typeof obj1 !== 'object' || obj1 === null ||\r\n    typeof obj2 !== 'object' || obj2 === null) {\r\n    return false;\r\n  }\r\n\r\n  // 如果是数组，比较数组长度并递归比较每个元素\r\n  if (Array.isArray(obj1) && Array.isArray(obj2)) {\r\n    if (obj1.length !== obj2.length) return false;\r\n    for (let i = 0; i < obj1.length; i++) {\r\n      if (!deepEqual(obj1[i], obj2[i], keysToCompare)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // 如果不是数组，则按对象处理\r\n  const keys1 = keysToCompare || Object.keys(obj1);\r\n\r\n  // 比较对象中的键值对\r\n  for (let key of keys1) {\r\n    if ((!(key in obj1) && (key in obj2) || ((key in obj1) && !(key in obj2))) || !deepEqual(obj1[key], obj2[key])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n\r\n","import { createUuid } from \"../tools\";\r\n\r\ninterface ShapeProp {\r\n  type: number;\r\n  [key: string]: any;\r\n}\r\nexport default class Shape {\r\n  /** 标签id */\r\n  public tagId: string = \"\";\r\n  /** 标签名称 */\r\n  public label: string = \"\";\r\n  /** 标注Id(数据库中获得) */\r\n  public labelId: string = \"\";\r\n  public labelType = 0; // 0: 标注标签 1: 参考标签 2: 智能标签\r\n  /** 是否隐藏标签 */\r\n  public hideLabel: boolean;\r\n  /** 是否有重叠 */\r\n  public truncated: number = 0;\r\n  /** 坐标 */\r\n  public coor: any[] = [];\r\n  /** 边线颜色 */\r\n  public strokeStyle: string;\r\n  /** 填充颜色 */\r\n  public fillStyle: string;\r\n  /** 边线宽度 */\r\n  public lineWidth: number;\r\n  /** 标签填充颜色 */\r\n  public labelFillStyle: string;\r\n  /** 标签文字颜色 */\r\n  public textFillStyle: string;\r\n  /** 标签文字字体 */\r\n  public labelFont: string;\r\n  /** 标签文字字型 */\r\n  public labelFontFamily: string;\r\n  /** 标签文字字号 */\r\n  public labelFontSize: number;\r\n  /** 1 矩形，2 多边形，3 点，4 折线，5 圆，6 网格 */\r\n  public type: number; // 形状\r\n  /** 当前是否处于活动状态 */\r\n  public active: boolean = false;\r\n  /** 当前是否处于创建状态 */\r\n  public creating: boolean = false;\r\n  /** 当前是否处于拖拽状态 */\r\n  public dragging: boolean = false;\r\n  /** 当前是否处于隐藏状态 */\r\n  public hiddening: boolean = false;\r\n  /** 当前是否处于锁定状态 */\r\n  public locking: boolean = false;\r\n  /** 备注 */\r\n  public remark: string;\r\n  /** 索引 */\r\n  public index: number;\r\n  /** 唯一标识 */\r\n  public uuid: string = createUuid();\r\n  /** 向上展示label */\r\n  public labelUp: boolean;\r\n  constructor(item: ShapeProp, index: number) {\r\n    this.index = index;\r\n    Object.assign(this, item);\r\n  }\r\n}\r\n","import Rect from \"./shape/Rect\";\r\nimport Polygon from \"./shape/Polygon\";\r\nimport Dot from \"./shape/Dot\";\r\nimport EventBus from \"./EventBus\";\r\nimport Line from \"./shape/Line\";\r\nimport Circle from \"./shape/Circle\";\r\nimport Grid from \"./shape/Grid\";\r\nimport Brush from \"./shape/Brush\";\r\nimport Mask from \"./shape/Mask\";\r\nimport Pencil from \"./shape/Pencil\";\r\nimport pkg from \"../package.json\";\r\nimport { isNested, createUuid, deepClone, deepEqual } from \"./tools\";\r\n\r\nexport type Point = [number, number];\r\nexport type AllShape =\r\n  | Rect\r\n  | Polygon\r\n  | Dot\r\n  | Line\r\n  | Circle\r\n  | Grid\r\n  | Brush\r\n  | Mask\r\n  | Pencil;\r\nenum Shape {\r\n  None,\r\n  Rect,\r\n  Polygon,\r\n  Dot,\r\n  Line,\r\n  Circle,\r\n  Grid,\r\n  Brush,\r\n  Mask,\r\n  Pencil\r\n}\r\n\r\ninterface MagicPoint {\r\n  coor: [number, number];\r\n  color: string;\r\n}\r\nexport default class CanvasSelect extends EventBus {\r\n  /** 当前版本 */\r\n  version = pkg.version;\r\n  /** 只读模式，画布不允许任何交互 */\r\n  lock: boolean = false;\r\n  /** 只读模式，仅支持查看 */\r\n  readonly: boolean = false;\r\n  /** 最小矩形宽度 */\r\n  MIN_WIDTH = 10;\r\n  /** 最小矩形高度 */\r\n  MIN_HEIGHT = 10;\r\n  /** 最小圆形半径 */\r\n  MIN_RADIUS = 5;\r\n  /** 最小轨迹点数 */\r\n  MIN_POINTNUM = 3;\r\n  /** 缩放图像的最小边长 */\r\n  MIN_LENGTH = 140;\r\n  /** 边线颜色 */\r\n  strokeStyle = \"#000\";\r\n  /** 填充颜色 */\r\n  fillStyle = \"rgba(0, 0, 255, 0.1)\";\r\n  /** 边线宽度 */\r\n  lineWidth = 2;\r\n  /** 当前选中的标注边线颜色 */\r\n  activeStrokeStyle = \"#000\";\r\n  /** 当前选中的标注填充颜色 */\r\n  activeFillStyle = \"#000\";\r\n  /** 控制点边线颜色 */\r\n  ctrlStrokeStyle = \"#000\";\r\n  /** 控制点填充颜色 */\r\n  ctrlFillStyle = \"#fff\";\r\n  /** 控制点半径 */\r\n  ctrlRadius = 3;\r\n  /** 是否隐藏标签 */\r\n  hideLabel = false;\r\n  /** 标签背景填充颜色 */\r\n  labelFillStyle = \"rgba(255, 255, 255, 0.5)\";\r\n  /** 标签字体 */\r\n  // labelFont = '12px sans-serif';\r\n  /** 标签字型 */\r\n  labelFontFamily = \"sans-serif\";\r\n  /** 标签字号 */\r\n  labelFontSize = 18;\r\n  /** 标签文字颜色 */\r\n  textFillStyle = \"#FFFFFF\";\r\n  /** 标签字符最大长度，超出使用省略号 */\r\n  labelMaxLen = 10;\r\n  /** 画布宽度 */\r\n  WIDTH = 0;\r\n  /** 画布高度 */\r\n  HEIGHT = 0;\r\n  /** 背景图src */\r\n  imagesrc = \"\";\r\n  imagealpha = 1;\r\n\r\n  canvas: HTMLCanvasElement;\r\n\r\n  ctx: CanvasRenderingContext2D;\r\n  /** 变化前的所有标注数据 */\r\n  olddataset: AllShape[] = [];\r\n  /** 所有标注数据 */\r\n  dataset: AllShape[] = [];\r\n\r\n  /** 撤销数组最多保存记录条数 */\r\n  MAX_LENGTH = 10;\r\n\r\n  // 保存一次完成的修改后的记录(触发按钮事件或鼠标抬起)\r\n  doneList: AllShape[][] = [];\r\n\r\n  // 保存撤销的记录\r\n  undoList: AllShape[][] = [];\r\n\r\n  /** 记录所有隐藏图形的uuid*/\r\n  hideList: string[] = [];\r\n\r\n  offScreen: HTMLCanvasElement;\r\n\r\n  offScreenCtx: CanvasRenderingContext2D;\r\n  /** 记录锚点距离 */\r\n  remmber: number[][];\r\n  /** 记录鼠标位置 */\r\n  mouse: Point;\r\n  /** 记录背景图鼠标位移 */\r\n  remmberOrigin: number[] = [0, 0];\r\n  /** 0 不创建，1 矩形，2 多边形，3 点，4 折线，5 圆，6 网格, 7 刷子brush, 8 Mask，9 钢笔 */\r\n  createType: Shape = Shape.None; //\r\n  /** 控制点索引 */\r\n  ctrlIndex = -1;\r\n  /** 选中控制点索引 */\r\n  clickIndex = -1;\r\n  /** 背景图片 */\r\n  image: HTMLImageElement = new Image();\r\n  /** 图片原始宽度 */\r\n  IMAGE_ORIGIN_WIDTH: number;\r\n  /** 图片缩放宽度 */\r\n  IMAGE_WIDTH = 0;\r\n  /** 图片原始高度 */\r\n  IMAGE_ORIGIN_HEIGHT = 0;\r\n  /** 图片缩放高度 */\r\n  IMAGE_HEIGHT = 0;\r\n  /** 原点x */\r\n  originX = 0;\r\n  /** 原点y */\r\n  originY = 0;\r\n  /** 图片缩放步长 */\r\n  scaleStep = 0;\r\n  /** 标签名缩放步长 */\r\n  textscaleStep = 0;\r\n  /** 滚动缩放 */\r\n  scrollZoom = true;\r\n\r\n  private timer: any;\r\n  /** 最小touch双击时间 */\r\n  dblTouch = 300;\r\n  /** 记录touch双击开始时间 */\r\n  dblTouchStore = 0; //\r\n  /** 这个选项可以帮助浏览器进行内部优化 */\r\n  alpha = true;\r\n  /** 专注模式 */\r\n  focusMode = false;\r\n  /** 记录当前事件 */\r\n  private evt: MouseEvent | TouchEvent | KeyboardEvent;\r\n  /** 触控缩放时记录上一次两点距离 */\r\n  scaleTouchStore = 0;\r\n  /** 当前是否为双指触控 */\r\n  isTouch2 = false;\r\n  isMobile = navigator.userAgent.includes(\"Mobile\");\r\n  /** 向上展示label */\r\n  labelUp = false;\r\n  private isCtrlKey = false;\r\n  /** 自定义ctrl快捷键 KeyboardEvent.code */\r\n  ctrlCode = \"ControlLeft\";\r\n  /** 网格右键菜单 */\r\n  gridMenuEnable = true;\r\n  /** 网格选中背景填充颜色 */\r\n  gridSelectedFillStyle = \"rgba(255, 255, 0, 0.8)\";\r\n\r\n  /** 记录是否正在使用brush */\r\n  ispainting = false;\r\n\r\n  /** brush线条样式 */\r\n  brushlineWidth = 1;\r\n  brushstrokeStyle = \"rgba(255, 0, 0, 0.8)\";\r\n\r\n  pencillineWidth = 0.5;\r\n  pencilstrokeStyle = \"rgba(255, 0, 0, 0.8)\";\r\n\r\n  // maskfillStyle = \"rgba(255, 0, 0, 0.5)\";\r\n  mask_alpha = 96;\r\n  densityFactor = 1;\r\n\r\n  /** 记录正在生成轮廓的mask的canvasData */\r\n  activeCanvasData: ImageData | null = null;\r\n  /** 记录正在生成的轮廓 */\r\n  activePolygon: string = \"\";\r\n\r\n  isEraser = false;\r\n  isErasing = false;\r\n\r\n  eraserPoints: [number, number][] = [];\r\n\r\n  eraserSize = 8; // 橡皮擦的半径\r\n\r\n  random_color = [\r\n    { r: 255, g: 0, b: 0 },\r\n    { r: 0, g: 255, b: 0 },\r\n    { r: 0, b: 255, g: 0 }\r\n  ];\r\n\r\n  isMagicToolActive = false;\r\n\r\n  magicPoints: MagicPoint[] = [];\r\n\r\n  maxLinePointCount = 2;\r\n\r\n  /**\r\n   * @param el Valid CSS selector string, or DOM\r\n   * @param src image src\r\n   */\r\n  constructor(el: HTMLCanvasElement | string, src?: string) {\r\n    super();\r\n    this.handleLoad = this.handleLoad.bind(this);\r\n    this.handleContextmenu = this.handleContextmenu.bind(this);\r\n    this.handleMousewheel = this.handleMousewheel.bind(this);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n    this.handleDblclick = this.handleDblclick.bind(this);\r\n    this.handleKeyup = this.handleKeyup.bind(this);\r\n    this.handleKeydown = this.handleKeydown.bind(this);\r\n    const container = typeof el === \"string\" ? document.querySelector(el) : el;\r\n    if (container instanceof HTMLCanvasElement) {\r\n      this.canvas = container;\r\n      this.offScreen = document.createElement(\"canvas\");\r\n      this.imagesrc = src;\r\n      this.initSetting();\r\n      this.initEvents();\r\n      src && this.setImage(src);\r\n      for (let i = 1; i <= 255; i++) {\r\n        const red = Math.floor(Math.random() * 256);\r\n        const green = Math.floor(Math.random() * 256);\r\n        const blue = Math.floor(Math.random() * 256);\r\n        this.random_color[i] = { r: red, g: green, b: blue };\r\n      }\r\n    } else {\r\n      console.warn(\"HTMLCanvasElement is required!\");\r\n    }\r\n  }\r\n\r\n  /** 当前选中的标注 */\r\n  get activeShape() {\r\n    return this.dataset.find((x) => x.active) || ({} as any);\r\n  }\r\n\r\n  /** 当前缩放比例 */\r\n  get scale() {\r\n    if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\r\n      return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  /** 图片最小边尺寸 */\r\n  get imageMin() {\r\n    return Math.min(this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n  }\r\n\r\n  /** 图片原始最大边尺寸 */\r\n  get imageOriginMax() {\r\n    return Math.max(this.IMAGE_ORIGIN_WIDTH, this.IMAGE_ORIGIN_HEIGHT);\r\n  }\r\n\r\n  /** 合成事件 */\r\n  private mergeEvent(e: TouchEvent | MouseEvent) {\r\n    let mouseX = 0;\r\n    let mouseY = 0;\r\n    let mouseCX = 0;\r\n    let mouseCY = 0;\r\n    if (this.isMobile) {\r\n      const { clientX, clientY } = (e as TouchEvent).touches[0];\r\n      const target = e.target as HTMLCanvasElement;\r\n      const { left, top } = target.getBoundingClientRect();\r\n      mouseX = Math.round(clientX - left);\r\n      mouseY = Math.round(clientY - top);\r\n      if ((e as TouchEvent).touches.length === 2) {\r\n        const { clientX: clientX1 = 0, clientY: clientY1 = 0 } =\r\n          (e as TouchEvent).touches[1] || {};\r\n        mouseCX = Math.round(\r\n          Math.abs((clientX1 - clientX) / 2 + clientX) - left\r\n        );\r\n        mouseCY = Math.round(\r\n          Math.abs((clientY1 - clientY) / 2 + clientY) - top\r\n        );\r\n      }\r\n    } else {\r\n      mouseX = (e as MouseEvent).offsetX;\r\n      mouseY = (e as MouseEvent).offsetY;\r\n    }\r\n    return { ...e, mouseX, mouseY, mouseCX, mouseCY };\r\n  }\r\n\r\n  private handleLoad() {\r\n    this.emit(\"load\", this.image.src);\r\n    this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\r\n    this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\r\n    this.fitZoom();\r\n  }\r\n\r\n  private handleContextmenu(e: MouseEvent) {\r\n    e.preventDefault();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n  }\r\n\r\n  private handleMousewheel(e: WheelEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock || !this.scrollZoom) return;\r\n    const { mouseX, mouseY } = this.mergeEvent(e);\r\n    this.mouse = [mouseX, mouseY];\r\n\r\n    if (\r\n      (e.deltaY > 0 && this.imageMin < this.MIN_LENGTH) ||\r\n      (e.deltaY < 0 && this.IMAGE_WIDTH > this.imageOriginMax * 10)\r\n    ) {\r\n      return;\r\n    } else {\r\n      if (e.deltaY < 0) {\r\n        this.textscaleStep++;\r\n      } else {\r\n        this.textscaleStep--;\r\n      }\r\n      this.setScale(e.deltaY < 0, true);\r\n    }\r\n  }\r\n\r\n  private handleMouseDown(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n    const offsetX = Math.round(mouseX / this.scale);\r\n    const offsetY = Math.round(mouseY / this.scale);\r\n    this.mouse =\r\n      this.isMobile && (e as TouchEvent).touches.length === 2\r\n        ? [mouseCX, mouseCY]\r\n        : [mouseX, mouseY];\r\n    this.remmberOrigin = [mouseX - this.originX, mouseY - this.originY];\r\n    // 记录变化前的数据\r\n    this.olddataset = deepClone(this.dataset);\r\n    if (\r\n      (!this.isMobile && (e as MouseEvent).buttons === 1) ||\r\n      (this.isMobile && (e as TouchEvent).touches.length === 1)\r\n    ) {\r\n      // 鼠标左键\r\n      const ctrls = this.activeShape.ctrlsData || [];\r\n      this.ctrlIndex = ctrls.findIndex((coor: Point) =>\r\n        this.isPointInCircle(this.mouse, coor, this.ctrlRadius)\r\n      );\r\n      this.clickIndex = this.ctrlIndex; // 记录选中的控制点索引，用于控制点加粗变红和编辑控制点\r\n      if (this.ctrlIndex > -1 && !this.readonly) {\r\n        // 点击到控制点\r\n        console.log(\"this.ctrlIndex\", this.ctrlIndex);\r\n        const [x0, y0] = ctrls[this.ctrlIndex];\r\n        if (\r\n          this.activeShape.type === Shape.Polygon &&\r\n          this.activeShape.coor.length > 2 &&\r\n          this.ctrlIndex === 0\r\n        ) {\r\n          this.handleDblclick(e);\r\n        } else {\r\n          this.update();\r\n        }\r\n        this.remmber = [[offsetX - x0, offsetY - y0]];\r\n      } else if (this.isInBackground(e)) {\r\n        if (this.activeShape.creating && !this.readonly) {\r\n          // 创建中\r\n          if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n            const [x, y] =\r\n              this.activeShape.coor[this.activeShape.coor.length - 1];\r\n            if (x !== offsetX && y !== offsetY) {\r\n              const nx = Math.round(offsetX - this.originX / this.scale);\r\n              const ny = Math.round(offsetY - this.originY / this.scale);\r\n              this.activeShape.coor.push([nx, ny]);\r\n            }\r\n          }\r\n        } else if (\r\n          this.createType !== Shape.None &&\r\n          !this.readonly &&\r\n          !this.isCtrlKey\r\n        ) {\r\n          // 开始创建\r\n          let newShape;\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const curPoint: Point = [nx, ny];\r\n          switch (this.createType) {\r\n            case Shape.Rect:\r\n              newShape = new Rect(\r\n                { coor: [curPoint, curPoint] },\r\n                this.dataset.length\r\n              );\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Polygon:\r\n              newShape = new Polygon({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Dot:\r\n              newShape = new Dot({ coor: curPoint }, this.dataset.length);\r\n              this.emit(\"add\", newShape);\r\n              break;\r\n            case Shape.Line:\r\n              newShape = new Line({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Circle:\r\n              newShape = new Circle({ coor: curPoint }, this.dataset.length);\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Grid:\r\n              newShape = new Grid(\r\n                { coor: [curPoint, curPoint] },\r\n                this.dataset.length\r\n              );\r\n              newShape.creating = true;\r\n              break;\r\n            case Shape.Brush:\r\n              newShape = new Brush({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              newShape.lineWidth = this.brushlineWidth;\r\n              newShape.strokeStyle = this.brushstrokeStyle;\r\n              this.ispainting = true;\r\n              if (this.isEraser) {\r\n                newShape.iseraser = true;\r\n                // this.ctx.save();\r\n                // this.ctx.globalCompositeOperation = 'destination-out';\r\n                // this.ctx.beginPath();\r\n                // this.ctx.arc(this.mouse[0], this.mouse[1], this.brushlineWidth / 2, 0, Math.PI * 2);\r\n                // this.ctx.fill();\r\n                // this.ctx.restore();\r\n                // this.lastX = this.mouse[0];\r\n                // this.lastY = this.mouse[1];\r\n              }\r\n              break;\r\n            case Shape.Pencil:\r\n              newShape = new Pencil({ coor: [curPoint] }, this.dataset.length);\r\n              newShape.creating = true;\r\n              newShape.lineWidth = this.pencillineWidth;\r\n              newShape.strokeStyle = this.pencilstrokeStyle;\r\n              this.ispainting = true;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          this.dataset.forEach((sp) => {\r\n            sp.active = false;\r\n          });\r\n          newShape.active = true;\r\n          this.dataset.push(newShape);\r\n        } else {\r\n          // 是否点击到形状\r\n          const [hitShapeIndex, hitShape] = this.hitOnShape(this.mouse);\r\n          if (hitShapeIndex > -1 && !hitShape.locking && !this.readonly) {\r\n            if (\r\n              hitShape.type === Shape.Dot &&\r\n              \"color\" in hitShape &&\r\n              hitShape.color !== \"\"\r\n            ) {\r\n              return; // 智能标注生成的点不可被选中\r\n            }\r\n            if (hitShape.type === Shape.Brush) {\r\n              if (\"iseraser\" in hitShape && !hitShape.iseraser) {\r\n                this.dataset.forEach(\r\n                  (item, i) => (item.active = i === hitShapeIndex)\r\n                );\r\n                // if (this.activeShape.boundingRect.length === 0) {\r\n                //   this.activeShape.boundingRect = this.removeDuplicatePoints(\r\n                //     hitShape.coor,\r\n                //     true,\r\n                //     false\r\n                //   ).resultRect;\r\n                // }\r\n                this.emit(\"select\", hitShape);\r\n              }\r\n              return; // 刷子、橡皮檫和钢笔轨迹不可被拖拽\r\n            }\r\n            if (hitShape.type === Shape.Pencil) {\r\n              this.dataset.forEach(\r\n                (item, i) => (item.active = i === hitShapeIndex)\r\n              );\r\n              // if (this.activeShape.boundingRect.length === 0) {\r\n              //   this.activeShape.boundingRect = this.removeDuplicatePoints(\r\n              //     hitShape.coor,\r\n              //     true,\r\n              //     false\r\n              //   ).resultRect;\r\n              // }\r\n              this.emit(\"select\", hitShape);\r\n              this.update();\r\n              return; // 刷子、橡皮檫和钢笔轨迹不可被拖拽\r\n            }\r\n            // if(hitShape.type === Shape.Mask){\r\n            //     hitShape.active = true;\r\n            //     this.highlightMask(hitShapeIndex);\r\n            //     return; // 刷子、橡皮檫和钢笔轨迹不可被拖拽\r\n            // }\r\n            hitShape.dragging = true;\r\n            this.dataset.forEach(\r\n              (item, i) => (item.active = i === hitShapeIndex)\r\n            );\r\n            this.dataset.splice(hitShapeIndex, 1, hitShape);\r\n            // this.dataset.push(hitShape);\r\n            if (!this.readonly) {\r\n              this.remmber = [];\r\n              if ([Shape.Dot, Shape.Circle].includes(hitShape.type)) {\r\n                const [x, y] = hitShape.coor;\r\n                this.remmber = [[offsetX - x, offsetY - y]];\r\n              } else {\r\n                hitShape.coor.forEach((pt: any) => {\r\n                  this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\r\n                });\r\n              }\r\n            }\r\n            this.emit(\"select\", hitShape);\r\n          } else {\r\n            this.activeShape.active = false;\r\n            this.dataset.sort((a, b) => a.index - b.index);\r\n            this.emit(\"select\", null);\r\n          }\r\n        }\r\n        this.update();\r\n      }\r\n      // else {\r\n      //   this.activeShape.active = false;\r\n      //   this.dataset.sort((a, b) => a.index - b.index);\r\n      //   this.emit(\"select\", null);\r\n      //   this.update();\r\n      // }\r\n    } else if (\r\n      (!this.isMobile && (e as MouseEvent).buttons === 2) ||\r\n      (this.isMobile &&\r\n        (e as TouchEvent).touches.length === 3 &&\r\n        !this.readonly)\r\n    ) {\r\n      // 鼠标右键\r\n      if ([Shape.Grid].includes(this.activeShape.type) && this.gridMenuEnable) {\r\n        const rowCol = prompt(\r\n          \"x 行 y 列 x,y\",\r\n          [this.activeShape.row, this.activeShape.col].join(\",\")\r\n        );\r\n        if (typeof rowCol === \"string\") {\r\n          const [row, col] = rowCol.split(\",\");\r\n          if (/^[1-9]\\d*$/.test(row) && /^[1-9]\\d*$/.test(col)) {\r\n            this.activeShape.row = Number(row);\r\n            this.activeShape.col = Number(col);\r\n            this.update();\r\n          }\r\n        }\r\n      }\r\n      this.emit(\"contextmenu\", e);\r\n    }\r\n  }\r\n\r\n  private handleMouseMove(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    const { mouseX, mouseY, mouseCX, mouseCY } = this.mergeEvent(e);\r\n    const offsetX = Math.round(mouseX / this.scale);\r\n    const offsetY = Math.round(mouseY / this.scale);\r\n    this.mouse =\r\n      this.isMobile && (e as TouchEvent).touches.length === 2\r\n        ? [mouseCX, mouseCY]\r\n        : [mouseX, mouseY];\r\n    if (\r\n      ((!this.isMobile && (e as MouseEvent).buttons === 1) ||\r\n        (this.isMobile && (e as TouchEvent).touches.length === 1)) &&\r\n      this.activeShape.type\r\n    ) {\r\n      if (\r\n        this.ctrlIndex > -1 &&\r\n        this.remmber.length &&\r\n        (this.isInBackground(e) || this.activeShape.type === Shape.Circle)\r\n      ) {\r\n        const [[x, y]] = this.remmber;\r\n        // resize矩形\r\n        if ([Shape.Rect, Shape.Grid].includes(this.activeShape.type)) {\r\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n          let coor: Point[] = [];\r\n          switch (this.ctrlIndex) {\r\n            case 0:\r\n              coor = [\r\n                [offsetX - x, offsetY - y],\r\n                [x1, y1]\r\n              ];\r\n              break;\r\n            case 1:\r\n              coor = [\r\n                [x0, offsetY - y],\r\n                [x1, y1]\r\n              ];\r\n              break;\r\n            case 2:\r\n              coor = [\r\n                [x0, offsetY - y],\r\n                [offsetX - x, y1]\r\n              ];\r\n              break;\r\n            case 3:\r\n              coor = [\r\n                [x0, y0],\r\n                [offsetX - x, y1]\r\n              ];\r\n              break;\r\n            case 4:\r\n              coor = [\r\n                [x0, y0],\r\n                [offsetX - x, offsetY - y]\r\n              ];\r\n              break;\r\n            case 5:\r\n              coor = [\r\n                [x0, y0],\r\n                [x1, offsetY - y]\r\n              ];\r\n              break;\r\n            case 6:\r\n              coor = [\r\n                [offsetX - x, y0],\r\n                [x1, offsetY - y]\r\n              ];\r\n              break;\r\n            case 7:\r\n              coor = [\r\n                [offsetX - x, y0],\r\n                [x1, y1]\r\n              ];\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          let [[a0, b0], [a1, b1]] = coor;\r\n          if (\r\n            a0 < 0 ||\r\n            a1 < 0 ||\r\n            b0 < 0 ||\r\n            b1 < 0 ||\r\n            a1 > this.IMAGE_ORIGIN_WIDTH ||\r\n            b1 > this.IMAGE_ORIGIN_HEIGHT\r\n          ) {\r\n            // 偶然触发 超出边界处理\r\n            a0 < 0 && (a0 = 0);\r\n            a1 < 0 && (a1 = 0);\r\n            b0 < 0 && (b0 = 0);\r\n            b1 < 0 && (b1 = 0);\r\n            if (a1 > this.IMAGE_ORIGIN_WIDTH) {\r\n              a1 = this.IMAGE_ORIGIN_WIDTH;\r\n            }\r\n            if (b1 > this.IMAGE_ORIGIN_HEIGHT) {\r\n              b1 = this.IMAGE_ORIGIN_HEIGHT;\r\n            }\r\n          }\r\n\r\n          if (a1 - a0 >= this.MIN_WIDTH && b1 - b0 >= this.MIN_HEIGHT) {\r\n            this.activeShape.coor = [\r\n              [a0, b0],\r\n              [a1, b1]\r\n            ];\r\n          } else {\r\n            this.emit(\r\n              \"warn\",\r\n              `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than${this.MIN_HEIGHT}。`\r\n            );\r\n          }\r\n        } else if (\r\n          [Shape.Polygon, Shape.Line].includes(this.activeShape.type)\r\n        ) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const newPoint = [nx, ny];\r\n          this.activeShape.coor.splice(this.ctrlIndex, 1, newPoint); // 修改点坐标\r\n        } else if (this.activeShape.type === Shape.Circle) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const newRadius = nx - this.activeShape.coor[0];\r\n          if (newRadius >= this.MIN_RADIUS) this.activeShape.radius = newRadius;\r\n        }\r\n      } else if (this.activeShape.dragging && !this.readonly) {\r\n        // 拖拽\r\n        let coor = [];\r\n        let noLimit = true;\r\n        const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\r\n        const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\r\n        if ([Shape.Dot, Shape.Circle].includes(this.activeShape.type)) {\r\n          const [t1, t2] = this.remmber[0];\r\n          const x = offsetX - t1;\r\n          const y = offsetY - t2;\r\n          if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n          coor = [x, y];\r\n        } else {\r\n          for (let i = 0; i < this.activeShape.coor.length; i++) {\r\n            const tar = this.remmber[i];\r\n            const x = offsetX - tar[0];\r\n            const y = offsetY - tar[1];\r\n            if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\r\n            coor.push([x, y]);\r\n          }\r\n        }\r\n        if (noLimit) this.activeShape.coor = coor;\r\n      } else if (this.activeShape.creating && this.isInBackground(e)) {\r\n        const x = Math.round(offsetX - this.originX / this.scale);\r\n        const y = Math.round(offsetY - this.originY / this.scale);\r\n        // 创建矩形\r\n        if ([Shape.Rect, Shape.Grid].includes(this.activeShape.type)) {\r\n          this.activeShape.coor.splice(1, 1, [x, y]);\r\n        } else if (this.activeShape.type === Shape.Circle) {\r\n          const [x0, y0] = this.activeShape.coor;\r\n          const r = Math.sqrt((x0 - x) ** 2 + (y0 - y) ** 2);\r\n          this.activeShape.radius = r;\r\n        } else if (this.ispainting && this.createType === Shape.Brush) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const newPoint: Point = [nx, ny];\r\n          this.activeShape.coor.push(newPoint);\r\n        } else if (this.ispainting && this.createType === Shape.Pencil) {\r\n          const nx = Math.round(offsetX - this.originX / this.scale);\r\n          const ny = Math.round(offsetY - this.originY / this.scale);\r\n          const newPoint: Point = [nx, ny];\r\n          this.activeShape.coor.push(newPoint);\r\n        }\r\n      }\r\n      this.update();\r\n    } else if (\r\n      [Shape.Polygon, Shape.Line, Shape.Brush, Shape.Pencil].includes(\r\n        this.activeShape.type\r\n      ) &&\r\n      this.activeShape.creating\r\n    ) {\r\n      // 多边形添加点\r\n      this.update();\r\n    } else if (\r\n      (!this.isMobile &&\r\n        (e as MouseEvent).buttons === 2 &&\r\n        (e as MouseEvent).which === 3) ||\r\n      (this.isMobile &&\r\n        (e as TouchEvent).touches.length === 1 &&\r\n        !this.isTouch2)\r\n    ) {\r\n      // 拖动背景\r\n      this.originX = Math.round(mouseX - this.remmberOrigin[0]);\r\n      this.originY = Math.round(mouseY - this.remmberOrigin[1]);\r\n      this.emit(\"dragimg\");\r\n      this.update();\r\n    } else if (this.isMobile && (e as TouchEvent).touches.length === 2) {\r\n      this.isTouch2 = true;\r\n      const touch0 = (e as TouchEvent).touches[0];\r\n      const touch1 = (e as TouchEvent).touches[1];\r\n      const cur = this.scaleTouchStore;\r\n      this.scaleTouchStore = Math.abs(\r\n        (touch1.clientX - touch0.clientX) * (touch1.clientY - touch0.clientY)\r\n      );\r\n      this.setScale(this.scaleTouchStore > cur, true);\r\n    }\r\n  }\r\n\r\n  private handleMouseUp(e: MouseEvent | TouchEvent) {\r\n    console.log(\"handleMouseUp\");\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    if (this.isMobile) {\r\n      if ((e as TouchEvent).touches.length === 0) {\r\n        this.isTouch2 = false;\r\n      }\r\n      if (Date.now() - this.dblTouchStore < this.dblTouch) {\r\n        this.handleDblclick(e);\r\n        return;\r\n      }\r\n      this.dblTouchStore = Date.now();\r\n    }\r\n    this.remmber = [];\r\n    if (this.activeShape.type !== Shape.None && !this.isCtrlKey) {\r\n      // if (this.activeShape.dragging) {\r\n      //   this.activeShape.truncated = 0;\r\n      //   for (let i = 0; i < this.dataset.length; i++) {\r\n      //     if (\r\n      //       this.dataset[i].type === Shape.Rect &&\r\n      //       this.dataset[i].index !== this.activeShape.index\r\n      //     ) {\r\n      //       if (\r\n      //         this.dataset[i].coor[1][0] > this.activeShape.coor[0][0] &&\r\n      //         this.dataset[i].coor[0][0] < this.activeShape.coor[1][0] &&\r\n      //         this.dataset[i].coor[1][1] > this.activeShape.coor[0][1] &&\r\n      //         this.dataset[i].coor[0][1] < this.activeShape.coor[1][1]\r\n      //       ) {\r\n      //         this.activeShape.truncated = 1;\r\n      //       }\r\n      //     }\r\n      //   }\r\n      // }\r\n      this.activeShape.dragging = false;\r\n      if (this.activeShape.creating) {\r\n        if ([Shape.Rect, Shape.Grid].includes(this.activeShape.type)) {\r\n          const [[x0, y0], [x1, y1]] = this.activeShape.coor;\r\n          if (\r\n            Math.abs(x0 - x1) < this.MIN_WIDTH ||\r\n            Math.abs(y0 - y1) < this.MIN_HEIGHT\r\n          ) {\r\n            this.dataset.pop();\r\n            this.emit(\r\n              \"warn\",\r\n              `Width cannot be less than ${this.MIN_WIDTH},Height cannot be less than ${this.MIN_HEIGHT}`\r\n            );\r\n          } else {\r\n            this.activeShape.coor = [\r\n              [Math.min(x0, x1), Math.min(y0, y1)],\r\n              [Math.max(x0, x1), Math.max(y0, y1)]\r\n            ];\r\n            this.activeShape.creating = false;\r\n            this.activeShape.truncated = 0;\r\n            // 判断是否有重叠\r\n            // for (let i = 0; i < this.dataset.length; i++) {\r\n            //   if (\r\n            //     this.dataset[i].type === Shape.Rect &&\r\n            //     this.dataset[i].index !== this.activeShape.index\r\n            //   ) {\r\n            //     if (\r\n            //       this.dataset[i].coor[1][0] > this.activeShape.coor[0][0] &&\r\n            //       this.dataset[i].coor[0][0] < this.activeShape.coor[1][0] &&\r\n            //       this.dataset[i].coor[1][1] > this.activeShape.coor[0][1] &&\r\n            //       this.dataset[i].coor[0][1] < this.activeShape.coor[1][1]\r\n            //     ) {\r\n            //       this.activeShape.truncated = 1;\r\n            //     }\r\n            //   }\r\n            // }\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.activeShape.type === Shape.Circle) {\r\n          if (this.activeShape.radius < this.MIN_RADIUS) {\r\n            this.dataset.pop();\r\n            this.emit(\"warn\", `Radius cannot be less than ${this.MIN_WIDTH}`);\r\n          } else {\r\n            this.activeShape.creating = false;\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.createType === Shape.Brush) {\r\n          if (this.activeShape.coor.length < this.MIN_POINTNUM) {\r\n            this.dataset.pop();\r\n            this.emit(\r\n              \"warn\",\r\n              `Path points cannot be less than ${this.MIN_POINTNUM}`\r\n            );\r\n          } else {\r\n            this.ispainting = false;\r\n            this.activeShape.creating = false;\r\n            // 去除重复点\r\n            const { resultCoor, resultRect } = this.removeDuplicatePoints(\r\n              this.activeShape.coor,\r\n              true\r\n            );\r\n            this.activeShape.coor = resultCoor;\r\n            this.activeShape.boundingRect = resultRect;\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.createType === Shape.Pencil) {\r\n          if (this.activeShape.coor.length < this.MIN_POINTNUM) {\r\n            this.dataset.pop();\r\n            this.emit(\r\n              \"warn\",\r\n              `Path points cannot be less than ${this.MIN_POINTNUM}`\r\n            );\r\n          } else {\r\n            this.activeShape.coor.push([-1, -1]);\r\n            this.ispainting = false;\r\n            this.activeShape.creating = false;\r\n            // 去除重复点\r\n            const { resultCoor, resultRect } = this.removeDuplicatePoints(\r\n              this.activeShape.coor,\r\n              true\r\n            );\r\n            this.activeShape.coor = resultCoor;\r\n            this.activeShape.boundingRect = resultRect;\r\n            this.emit(\"add\", this.activeShape);\r\n          }\r\n        } else if (this.createType === Shape.Line) {\r\n          if (this.activeShape.coor.length === this.maxLinePointCount) {\r\n            const canLine =\r\n              this.activeShape.type === Shape.Line &&\r\n              this.activeShape.coor.length > 1;\r\n            if (canLine) {\r\n              this.emit(\"add\", this.activeShape);\r\n              this.activeShape.creating = false;\r\n            }\r\n          }\r\n        }\r\n        this.update();\r\n      }\r\n      const condition = [\r\n        \"coor\",\r\n        \"label\",\r\n        \"labelUp\",\r\n        \"lineWidth\",\r\n        \"strokeStyle\",\r\n        \"textFillStyle\",\r\n        \"uuid\",\r\n        \"remark\",\r\n        \"length\"\r\n      ];\r\n      // console.log(deepEqual(this.olddataset, this.dataset, condition));\r\n      // console.log(\"this.olddataset\", this.olddataset);\r\n      // console.log(\"this.dataset\", this.dataset);\r\n      if (!deepEqual(this.olddataset, this.dataset, condition)) {\r\n        this.manageDoneList(deepClone(this.dataset));\r\n        console.log(\"this.doneList\", this.doneList);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDblclick(e: MouseEvent | TouchEvent) {\r\n    e.stopPropagation();\r\n    this.evt = e;\r\n    if (this.lock) return;\r\n    if ([Shape.Polygon, Shape.Line].includes(this.activeShape.type)) {\r\n      const canPolygon =\r\n        this.activeShape.type === Shape.Polygon &&\r\n        this.activeShape.coor.length > 2;\r\n      const canLine =\r\n        this.activeShape.type === Shape.Line &&\r\n        this.activeShape.coor.length > 1;\r\n      if (canPolygon || canLine) {\r\n        this.emit(\"add\", this.activeShape);\r\n        this.activeShape.creating = false;\r\n        this.update();\r\n      }\r\n    } else if ([Shape.Grid].includes(this.activeShape.type)) {\r\n      // 双击切换网格分区选中状态\r\n      if (this.activeShape.active) {\r\n        this.activeShape.gridRects.forEach(\r\n          (rect: { coor: Point[]; index: number }) => {\r\n            if (this.isPointInRect(this.mouse, rect.coor)) {\r\n              const thisIndex = this.activeShape.selected.findIndex(\r\n                (x: number) => rect.index === x\r\n              );\r\n              if (thisIndex > -1) {\r\n                this.activeShape.selected.splice(thisIndex, 1);\r\n              } else {\r\n                this.activeShape.selected.push(rect.index);\r\n              }\r\n            }\r\n          }\r\n        );\r\n        this.update();\r\n      }\r\n    }\r\n  }\r\n  private handleKeydown(e: KeyboardEvent) {\r\n    if (e.code === this.ctrlCode) {\r\n      this.isCtrlKey = true;\r\n    }\r\n  }\r\n\r\n  private handleKeyup(e: KeyboardEvent) {\r\n    if (e.code === this.ctrlCode) {\r\n      this.isCtrlKey = false;\r\n    }\r\n    this.evt = e;\r\n    // 检查是否按下了 Ctrl + V\r\n    if (this.isCtrlKey && e.key === \"v\" && !this.readonly) {\r\n      this.copyByIndex(this.activeShape.index);\r\n      return; // 直接返回，防止执行后续代码\r\n    }\r\n    if (this.lock || document.activeElement !== document.body || this.readonly)\r\n      return;\r\n    if (this.activeShape.type) {\r\n      if (\r\n        [Shape.Polygon, Shape.Line].includes(this.activeShape.type) &&\r\n        e.key === \"Escape\"\r\n      ) {\r\n        if (this.activeShape.coor.length > 1 && this.activeShape.creating) {\r\n          this.activeShape.coor.pop();\r\n        } else {\r\n          this.deleteByIndex(this.activeShape.index);\r\n        }\r\n        this.update();\r\n      } else if (e.key === \"Backspace\" || e.key === \"Delete\") {\r\n        this.deleteByIndex(this.activeShape.index);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** 初始化配置 */\r\n  initSetting() {\r\n    const dpr = window.devicePixelRatio || 1;\r\n    this.canvas.style.userSelect = \"none\";\r\n    this.ctx =\r\n      this.ctx ||\r\n      this.canvas.getContext(\"2d\", {\r\n        alpha: this.alpha,\r\n        willReadFrequently: true\r\n      });\r\n    this.WIDTH = Math.round(this.canvas.clientWidth);\r\n    this.HEIGHT = Math.round(this.canvas.clientHeight);\r\n    this.canvas.width = this.WIDTH * dpr;\r\n    this.canvas.height = this.HEIGHT * dpr;\r\n    this.canvas.style.width = this.WIDTH + \"px\";\r\n    this.canvas.style.height = this.HEIGHT + \"px\";\r\n    this.offScreen.width = this.WIDTH;\r\n    this.offScreen.height = this.HEIGHT;\r\n    this.offScreenCtx =\r\n      this.offScreenCtx ||\r\n      this.offScreen.getContext(\"2d\", { willReadFrequently: true });\r\n    this.ctx.scale(dpr, dpr);\r\n  }\r\n\r\n  /** 初始化事件 */\r\n  initEvents() {\r\n    if (!this.canvas) return;\r\n    this.image.addEventListener(\"load\", this.handleLoad);\r\n    this.canvas.addEventListener(\"touchstart\", this.handleMouseDown);\r\n    this.canvas.addEventListener(\"touchmove\", this.handleMouseMove);\r\n    this.canvas.addEventListener(\"touchend\", this.handleMouseUp);\r\n    this.canvas.addEventListener(\"contextmenu\", this.handleContextmenu);\r\n    this.canvas.addEventListener(\"mousewheel\", this.handleMousewheel); // 火狐浏览器不支持mousewheel事件\r\n    this.canvas.removeEventListener(\"wheel\", this.handleMousewheel); // 解决火狐浏览器不支持mousewheel事件的问题\r\n    this.canvas.addEventListener(\"mousedown\", this.handleMouseDown);\r\n    this.canvas.addEventListener(\"mousemove\", this.handleMouseMove);\r\n    this.canvas.addEventListener(\"mouseup\", this.handleMouseUp);\r\n    this.canvas.addEventListener(\"dblclick\", this.handleDblclick);\r\n    document.body.addEventListener(\"keydown\", this.handleKeydown, true);\r\n    document.body.addEventListener(\"keyup\", this.handleKeyup, true);\r\n  }\r\n\r\n  getscaledPoint(e: MouseEvent): Point {\r\n    const { mouseX, mouseY } = this.mergeEvent(e);\r\n    const offsetX = Math.round(mouseX / this.scale);\r\n    const offsetY = Math.round(mouseY / this.scale);\r\n    const nx = Math.round(offsetX - this.originX / this.scale);\r\n    const ny = Math.round(offsetY - this.originY / this.scale);\r\n    return [nx, ny];\r\n  }\r\n\r\n  /**\r\n   * 添加/切换图片\r\n   * @param url 图片链接\r\n   */\r\n  setImage(url: string, alpha: number = 1) {\r\n    // 解决问题：Failed to execute 'toDataURL' on 'HTMLCanvasElement': Tainted canvases may not be exported.\r\n    this.image.crossOrigin = \"Anonymous\";\r\n    this.image.src = url;\r\n    this.imagealpha = alpha;\r\n    this.scaleStep = 0;\r\n    this.textscaleStep = 0;\r\n  }\r\n\r\n  // 异步处理 Mask 形状的创建\r\n  async handleMaskShape(\r\n    item: AllShape,\r\n    index: number\r\n  ): Promise<AllShape | null> {\r\n    let tempshape = new Mask(item, index);\r\n    const maskBase64 = tempshape.maskBase64;\r\n    const maskImage = new Image();\r\n    maskImage.crossOrigin = \"Anonymous\";\r\n    maskImage.src = `data:image/png;base64,${maskBase64}`;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      maskImage.onload = () => {\r\n        const pixels: number[] = [];\r\n        const pixelData = this.getImagedataFromImageClass(maskImage, \"magic\");\r\n\r\n        if (pixelData) {\r\n          // 遍历像素，筛选符合条件的像素点\r\n          for (let i = 0; i < pixelData.length; i += 4) {\r\n            if (\r\n              pixelData[i] === 255 &&\r\n              pixelData[i + 1] === 255 &&\r\n              pixelData[i + 2] === 255\r\n            ) {\r\n              pixels.push(i);\r\n            }\r\n          }\r\n\r\n          tempshape.pixels = pixels;\r\n          tempshape.height = this.IMAGE_HEIGHT;\r\n          tempshape.weight = this.IMAGE_WIDTH;\r\n          tempshape.fillStyle = item.fillStyle;\r\n          tempshape.strokeStyle = item.strokeStyle;\r\n\r\n          // 根据 'maskToPolygon' 判断是否转换为 Polygon 形状\r\n          if (\r\n            \"maskToPolygon\" in item &&\r\n            item.maskToPolygon &&\r\n            tempshape.maskType === \"click\"\r\n          ) {\r\n            this.activeCanvasData = this.putDataOnCanvas(\r\n              this.canvas,\r\n              pixels,\r\n              tempshape.fillStyle,\r\n              false\r\n            );\r\n            const polygonShape = new Polygon(\r\n              {\r\n                coor: this.getContourPointsOfColoredRegion(\r\n                  this.activeCanvasData,\r\n                  0.5\r\n                )\r\n              },\r\n              index\r\n            );\r\n            polygonShape.tagId = item.tagId;\r\n            polygonShape.label = item.label;\r\n            polygonShape.strokeStyle = item.strokeStyle;\r\n            this.activePolygon = polygonShape.uuid;\r\n            resolve(polygonShape);\r\n          } else {\r\n            tempshape.canvasData = this.putDataOnCanvas(\r\n              this.canvas,\r\n              pixels,\r\n              tempshape.fillStyle,\r\n              true\r\n            );\r\n            tempshape.tagId = item.tagId;\r\n            tempshape.label = item.label;\r\n            resolve(tempshape);\r\n          }\r\n\r\n          // 绘制样本点\r\n          this.magicPoints = tempshape.magicPoints;\r\n        } else {\r\n          console.error(\"Failed to get pixel data from mask image\");\r\n          reject(null); // 如果加载像素数据失败，返回 null\r\n        }\r\n      };\r\n\r\n      maskImage.onerror = (err) => {\r\n        console.error(\"Error loading mask image\", err);\r\n        reject(null); // 如果加载图像失败，返回 null\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 设置数据\r\n   * @param data Array\r\n   * @param needCreate Boolean 是否需要创建(当传options时需要，当撤销重做操作传dataset时不需要)\r\n   */\r\n  setData(\r\n    data: AllShape[],\r\n    needCreate: boolean = true,\r\n    toMask: boolean = false,\r\n    initSize: boolean = false\r\n  ): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(async () => {\r\n        if (needCreate) {\r\n          const initdata: AllShape[] = [];\r\n          const itemIndexMap = new Map<AllShape, number>();\r\n\r\n          data.forEach((item, index) => {\r\n            itemIndexMap.set(item, index);\r\n          });\r\n\r\n          for (const item of data) {\r\n            if (Object.prototype.toString.call(item).includes(\"Object\")) {\r\n              let shape;\r\n              const index = itemIndexMap.get(item)!;\r\n\r\n              switch (item.type) {\r\n                case Shape.Rect:\r\n                  shape = new Rect(item, index);\r\n                  break;\r\n                case Shape.Polygon:\r\n                  shape = new Polygon(item, index);\r\n                  break;\r\n                case Shape.Dot:\r\n                  shape = new Dot(item, index);\r\n                  break;\r\n                case Shape.Line:\r\n                  shape = new Line(item, index);\r\n                  break;\r\n                case Shape.Circle:\r\n                  shape = new Circle(item, index);\r\n                  break;\r\n                case Shape.Grid:\r\n                  shape = new Grid(item, index);\r\n                  break;\r\n                case Shape.Brush:\r\n                  shape = new Brush(item, index);\r\n                  break;\r\n                case Shape.Mask:\r\n                  shape = await this.handleMaskShape(item, index);\r\n                  break;\r\n                case Shape.Pencil:\r\n                  shape = new Pencil(item, index);\r\n                  break;\r\n                default:\r\n                  console.warn(\"Invalid shape\", item);\r\n                  break;\r\n              }\r\n\r\n              if (\r\n                [\r\n                  Shape.Rect,\r\n                  Shape.Polygon,\r\n                  Shape.Dot,\r\n                  Shape.Line,\r\n                  Shape.Circle,\r\n                  Shape.Grid,\r\n                  Shape.Brush,\r\n                  Shape.Mask,\r\n                  Shape.Pencil\r\n                ].includes(item.type)\r\n              ) {\r\n                initdata.push(shape);\r\n              }\r\n            } else {\r\n              console.warn(\"Shape must be an enumerable Object.\", item);\r\n            }\r\n          }\r\n\r\n          this.dataset = initdata;\r\n        } else {\r\n          this.dataset = data;\r\n        }\r\n\r\n        this.update(toMask, initSize);\r\n\r\n        if (this.doneList.length === 0 && this.dataset !== undefined) {\r\n          this.manageDoneList(deepClone(this.dataset));\r\n        }\r\n\r\n        resolve(); // ✅ 完成后 resolve promise\r\n      }, 0); // 使用 setTimeout 模拟 nextTick，防止阻塞主线程\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否在标注实例上\r\n   * @param mousePoint 点击位置\r\n   * @returns\r\n   */\r\n  hitOnShape(mousePoint: Point): [number, AllShape] {\r\n    let hitShapeIndex = -1;\r\n    let hitShape: AllShape;\r\n    for (let i = this.dataset.length - 1; i > -1; i--) {\r\n      const shape = this.dataset[i];\r\n      if (\r\n        this.isPointInBackground(mousePoint) &&\r\n        ((shape.type === Shape.Dot &&\r\n          this.isPointInCircle(\r\n            mousePoint,\r\n            shape.coor as Point,\r\n            this.ctrlRadius\r\n          )) ||\r\n          (shape.type === Shape.Circle &&\r\n            this.isPointInCircle(\r\n              mousePoint,\r\n              shape.coor as Point,\r\n              (shape as Circle).radius * this.scale\r\n            )) ||\r\n          (shape.type === Shape.Rect &&\r\n            this.isPointInRect(mousePoint, (shape as Rect).coor)) ||\r\n          (shape.type === Shape.Polygon &&\r\n            this.isPointInPolygon(mousePoint, (shape as Polygon).coor)) ||\r\n          (shape.type === Shape.Line &&\r\n            this.isPointInLine(mousePoint, (shape as Line).coor)) ||\r\n          (shape.type === Shape.Grid &&\r\n            this.isPointInRect(mousePoint, (shape as Grid).coor)) ||\r\n          (shape.type === Shape.Brush &&\r\n            this.isPointInLine(mousePoint, (shape as Brush).coor)) ||\r\n          (shape.type === Shape.Pencil &&\r\n            this.isPointInPolygon(mousePoint, (shape as Pencil).coor)) ||\r\n          (shape.type === Shape.Mask &&\r\n            this.isMouseInPixelsRegion(mousePoint, (shape as Mask).canvasData)))\r\n      ) {\r\n        if ((this.focusMode && !shape.active) || shape.hiddening) continue;\r\n        hitShapeIndex = i;\r\n        hitShape = shape;\r\n        break;\r\n      }\r\n    }\r\n    return [hitShapeIndex, hitShape];\r\n  }\r\n\r\n  /**\r\n   * 判断是否在标注实例顶点上\r\n   * @param mousePoint 点击位置\r\n   * @returns\r\n   */\r\n  hitOnShapeVertex(): string {\r\n    let mouseType: string;\r\n    const shape = this.activeShape;\r\n    const ctrls = this.activeShape.ctrlsData || [];\r\n    this.ctrlIndex = ctrls.findIndex((coor: Point) =>\r\n      this.isPointInCircle(this.mouse, coor, this.ctrlRadius)\r\n    );\r\n    if (this.ctrlIndex > -1 && !this.readonly && !shape.hiddening) {\r\n      if (shape.type === Shape.Rect) {\r\n        if (this.ctrlIndex === 0) {\r\n          mouseType = \"nw-resize\";\r\n        } else if (this.ctrlIndex === 1) {\r\n          mouseType = \"ns-resize\";\r\n        } else if (this.ctrlIndex === 2) {\r\n          mouseType = \"ne-resize\";\r\n        } else if (this.ctrlIndex === 3) {\r\n          mouseType = \"ew-resize\";\r\n        } else if (this.ctrlIndex === 4) {\r\n          mouseType = \"se-resize\";\r\n        } else if (this.ctrlIndex === 5) {\r\n          mouseType = \"ns-resize\";\r\n        } else if (this.ctrlIndex === 6) {\r\n          mouseType = \"sw-resize\";\r\n        } else {\r\n          mouseType = \"ew-resize\";\r\n        }\r\n      } else if (\r\n        shape.type === Shape.Brush ||\r\n        shape.type === Shape.Pencil ||\r\n        shape.type === Shape.Polygon ||\r\n        shape.type === Shape.Line ||\r\n        shape.type === Shape.Circle\r\n      ) {\r\n        mouseType = \"pointer\";\r\n      } else {\r\n        mouseType = \"move\";\r\n      }\r\n    } else {\r\n      mouseType = \"\";\r\n    }\r\n    return mouseType;\r\n  }\r\n\r\n  /**\r\n   * 判断鼠标是否在背景图内部\r\n   * @param e MouseEvent\r\n   * @returns 布尔值\r\n   */\r\n  isInBackground(e: MouseEvent | TouchEvent): boolean {\r\n    const { mouseX, mouseY } = this.mergeEvent(e);\r\n    return (\r\n      mouseX >= this.originX &&\r\n      mouseY >= this.originY &&\r\n      mouseX <= this.originX + this.IMAGE_ORIGIN_WIDTH * this.scale &&\r\n      mouseY <= this.originY + this.IMAGE_ORIGIN_HEIGHT * this.scale\r\n    );\r\n  }\r\n\r\n  /**point\r\n   * 判断点是否在背景图内部\r\n   * @param point Point\r\n   * @returns 布尔值\r\n   */\r\n  isPointInBackground(point: Point): boolean {\r\n    const pointX = point[0]; //???????????????\r\n    const pointY = point[1];\r\n    return (\r\n      pointX >= this.originX &&\r\n      pointY >= this.originY &&\r\n      pointX <= this.originX + this.IMAGE_ORIGIN_WIDTH * this.scale &&\r\n      pointY <= this.originY + this.IMAGE_ORIGIN_HEIGHT * this.scale\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 判断是否在矩形内\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointInRect(point: Point, coor: Point[]): boolean {\r\n    const [x, y] = point;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n    return (\r\n      x0 + this.originX < x &&\r\n      x < x1 + this.originX &&\r\n      y0 + this.originY < y &&\r\n      y < y1 + this.originY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 判断点是否在矩形的边上，并区分是在左右边还是上下边\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 字符串，表示对应的鼠标样式，或 'none' 表示不在边上\r\n   */\r\n  isPointOnRectEdge(point: Point, coor: Point[]): string {\r\n    const [x, y] = point;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n    const onLeftEdge =\r\n      x === x0 + this.originX &&\r\n      y >= y0 + this.originY &&\r\n      y <= y1 + this.originY;\r\n    const onRightEdge =\r\n      x === x1 + this.originX &&\r\n      y >= y0 + this.originY &&\r\n      y <= y1 + this.originY;\r\n    const onTopEdge =\r\n      y === y0 + this.originY &&\r\n      x >= x0 + this.originX &&\r\n      x <= x1 + this.originX;\r\n    const onBottomEdge =\r\n      y === y1 + this.originY &&\r\n      x >= x0 + this.originX &&\r\n      x <= x1 + this.originX;\r\n    if (onLeftEdge || onRightEdge) return \"ew-resize\";\r\n    if (onTopEdge || onBottomEdge) return \"ns-resize\";\r\n    return \"none\";\r\n  }\r\n\r\n  /**\r\n   * 判断点是否在矩形的顶点上，并区分是在左上、左下、右上还是右下顶点\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 字符串，表示对应的鼠标样式，或 'none' 表示不在顶点上\r\n   */\r\n  isPointOnRectVertex(point: Point, coor: Point[]): string {\r\n    const [x, y] = point;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\r\n    const onLeftTopPoint = x === x0 + this.originX && y === y0 + this.originY;\r\n    const onRightBottomEdge =\r\n      x === x1 + this.originX && y === y1 + this.originY;\r\n    const onRightTopEdge = x === x1 + this.originX && y === y0 + this.originY;\r\n    const onLeftBottomEdge = x === x0 + this.originX && y === y1 + this.originY;\r\n    if (onLeftTopPoint) return \"nw-resize\";\r\n    if (onRightBottomEdge) return \"se-resize\";\r\n    if (onRightTopEdge) return \"ne-resize\";\r\n    if (onLeftBottomEdge) return \"sw-resize\";\r\n    return \"none\";\r\n  }\r\n\r\n  /**\r\n   * 判断是否在多边形内\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointInPolygon(point: Point, coor: Point[]): boolean {\r\n    this.offScreenCtx.save();\r\n    this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n    this.offScreenCtx.translate(this.originX, this.originY);\r\n    this.offScreenCtx.beginPath();\r\n    coor.forEach((pt, i) => {\r\n      const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.offScreenCtx.moveTo(x, y);\r\n      } else {\r\n        this.offScreenCtx.lineTo(x, y);\r\n      }\r\n    });\r\n    this.offScreenCtx.closePath();\r\n    this.offScreenCtx.fill();\r\n    const areaData = this.offScreenCtx.getImageData(\r\n      0,\r\n      0,\r\n      this.WIDTH,\r\n      this.HEIGHT\r\n    );\r\n    const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n    this.offScreenCtx.restore();\r\n    return areaData.data[index + 3] !== 0;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在多边形顶点上\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointOnPolygonVertex(point: Point, coor: Point[]): boolean {\r\n    // 遍历每个顶点，检查是否和目标点重合\r\n    return coor.some((pt) => {\r\n      const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n      return x === point[0] + this.originX && y === point[1] + this.originY;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否在圆内\r\n   * @param point 坐标\r\n   * @param center 圆心\r\n   * @param r 半径\r\n   * @param needScale 是否为圆形点击检测\r\n   * @returns 布尔值\r\n   */\r\n  isPointInCircle(point: Point, center: Point, r: number): boolean {\r\n    const [x, y] = point;\r\n    const [x0, y0] = center.map((a) => a * this.scale);\r\n    const distance = Math.sqrt(\r\n      (x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2\r\n    );\r\n    return distance <= r;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在圆的顶点上\r\n   * @param point 坐标\r\n   * @param center 圆心\r\n   * @param r 半径\r\n   * @returns 布尔值\r\n   */\r\n  isPointOnCircleVertex(point: Point, center: Point, r: number): boolean {\r\n    const [x, y] = point;\r\n    const [x0, y0] = center.map((a) => a * this.scale);\r\n    return x === x0 + this.originX + r && y === y0 + this.originY;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在折线内\r\n   * @param point 坐标\r\n   * @param coor 区域坐标\r\n   * @returns 布尔值\r\n   */\r\n  isPointInLine(point: Point, coor: Point[]): boolean {\r\n    this.offScreenCtx.save();\r\n    this.offScreenCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n    this.offScreenCtx.translate(this.originX, this.originY);\r\n    this.offScreenCtx.lineWidth = this.lineWidth > 5 ? this.lineWidth : 5;\r\n    this.offScreenCtx.beginPath();\r\n    coor.forEach((pt, i) => {\r\n      const [x, y] = pt.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.offScreenCtx.moveTo(x, y);\r\n      } else {\r\n        this.offScreenCtx.lineTo(x, y);\r\n      }\r\n    });\r\n    this.offScreenCtx.stroke();\r\n    const areaData = this.offScreenCtx.getImageData(\r\n      0,\r\n      0,\r\n      this.WIDTH,\r\n      this.HEIGHT\r\n    );\r\n    const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\r\n    this.offScreenCtx.restore();\r\n    return areaData.data[index + 3] !== 0;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在折线内\r\n   * @param mousePoint 鼠标坐标\r\n   * @param pixels 像素点索引列表\r\n   * @returns 布尔值\r\n   */\r\n  isMouseInPixelsRegion(mousePoint: Point, canvasData: ImageData): boolean {\r\n    // 调整鼠标坐标（考虑原点偏移和缩放比例）\r\n    const mouseX = Math.floor(mousePoint[0] - this.originX); // 缩放并调整鼠标的 x 坐标\r\n    const mouseY = Math.floor(mousePoint[1] - this.originY); // 缩放并调整鼠标的 y 坐标\r\n    // console.log(`Adjusted mouse coordinates: (${mouseX}, ${mouseY})`);\r\n\r\n    // 获取指定点的像素数据\r\n    // 注意canvasData的高宽是向下取整，所以this.IMAGE_WIDTH要统一向下取整\r\n    const index = (mouseY * Math.floor(this.IMAGE_WIDTH) + mouseX) * 4;\r\n    const pixelAlpha = canvasData.data[index + 3]; // 获取透明度（alpha 通道）\r\n\r\n    // 判断该点是否在 pixels 区域内\r\n    if (pixelAlpha !== 0) {\r\n      // console.log(\"Mouse is inside the pixel region.\");\r\n      return true; // 如果透明度大于 0，说明该点在像素区域内\r\n    }\r\n\r\n    // console.log(\"Mouse is outside the pixel region.\");\r\n    return false; // 否则返回 false\r\n  }\r\n\r\n  getBoundingBoxOfColoredRegion(canvasData: ImageData): Point[] {\r\n    const data = canvasData.data; // 获取图像的 RGBA 数据\r\n    const width = canvasData.width; // 图像的宽度\r\n    const height = canvasData.height; // 图像的高度\r\n\r\n    let xMin = width,\r\n      xMax = 0,\r\n      yMin = height,\r\n      yMax = 0;\r\n\r\n    // 遍历每个像素\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        // 每个像素的 RGBA 数据索引\r\n        const index = (y * width + x) * 4;\r\n\r\n        const r = data[index]; // 红色通道\r\n        const g = data[index + 1]; // 绿色通道\r\n        const b = data[index + 2]; // 蓝色通道\r\n        const a = data[index + 3]; // alpha 通道（透明度）\r\n\r\n        // 判断该像素是否有颜色（alpha不为0或RGB有非零值）\r\n        if (a !== 0 && (r !== 255 || g !== 255 || b !== 255)) {\r\n          // 更新最小和最大坐标\r\n          xMin = Math.min(xMin, x);\r\n          xMax = Math.max(xMax, x);\r\n          yMin = Math.min(yMin, y);\r\n          yMax = Math.max(yMax, y);\r\n        }\r\n      }\r\n    }\r\n\r\n    // 如果没有找到有颜色的像素，返回一个无效的矩形\r\n    if (xMin > xMax || yMin > yMax) {\r\n      return [];\r\n    }\r\n\r\n    return [\r\n      [Math.round(xMin / this.scale), Math.round(yMin / this.scale)],\r\n      [Math.round(xMax / this.scale), Math.round(yMax / this.scale)]\r\n    ];\r\n  }\r\n\r\n  // 提取图像的轮廓点\r\n  getContourPointsOfColoredRegion(\r\n    canvasData: ImageData,\r\n    densityFactor: number = 1\r\n  ): Point[] {\r\n    const data = canvasData.data; // 获取图像的 RGBA 数据\r\n    const width = canvasData.width; // 图像的宽度\r\n    const height = canvasData.height; // 图像的高度\r\n\r\n    const contourPoints: Point[] = [];\r\n\r\n    // 遍历每个像素，寻找有颜色的区域，并根据阈值决定是否为轮廓点\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const index = (y * width + x) * 4;\r\n        const r = data[index]; // 红色通道\r\n        const g = data[index + 1]; // 绿色通道\r\n        const b = data[index + 2]; // 蓝色通道\r\n        const a = data[index + 3]; // alpha 通道（透明度）\r\n\r\n        // 判断是否为轮廓点：该点周围至少有一个邻居透明度为0的点\r\n        if (a !== 0 && (r !== 255 || g !== 255 || b !== 255)) {\r\n          const isBorderPoint = this.isBorderPoint(x, y, width, height, data);\r\n          if (isBorderPoint) {\r\n            contourPoints.push([\r\n              Math.round(x / this.scale),\r\n              Math.round(y / this.scale)\r\n            ]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // 去除重复点\r\n    const uniquePoints = this.removeDuplicatePoints(\r\n      contourPoints,\r\n      false\r\n    ).resultCoor;\r\n\r\n    // 根据密度因子控制疏密程度\r\n    const sampledPoints = this.samplePointsByDensity(\r\n      uniquePoints,\r\n      densityFactor\r\n    );\r\n\r\n    // 按照顺时针方向以质心为中心排序\r\n    return this.sortByPolarAngle(sampledPoints);\r\n  }\r\n\r\n  // 判断一个点是否是轮廓点\r\n  isBorderPoint(\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    data: Uint8ClampedArray\r\n  ): boolean {\r\n    const directions = [\r\n      [-1, 0],\r\n      [1, 0],\r\n      [0, -1],\r\n      [0, 1], // 四个方向\r\n      [-1, -1],\r\n      [-1, 1],\r\n      [1, -1],\r\n      [1, 1] // 四个对角线方向\r\n    ];\r\n\r\n    for (const [dx, dy] of directions) {\r\n      const nx = x + dx;\r\n      const ny = y + dy;\r\n      if (nx >= 0 && nx < width && ny >= 0 && ny < height) {\r\n        const index = (ny * width + nx) * 4;\r\n        const alpha = data[index + 3]; // 获取邻点的透明度\r\n        if (alpha === 0) {\r\n          return true; // 如果邻点是透明的，那么该点为轮廓点\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // 根据密度因子采样轮廓点\r\n  samplePointsByDensity(points: Point[], densityFactor: number): Point[] {\r\n    const sampledPoints: Point[] = [];\r\n    const step = Math.max(1, Math.floor(1 / densityFactor)); // 控制每隔多少个点采样一次\r\n\r\n    for (let i = 0; i < points.length; i += step) {\r\n      sampledPoints.push(points[i]);\r\n    }\r\n\r\n    return sampledPoints;\r\n  }\r\n\r\n  // 计算质心\r\n  calculateCentroid(points: Point[]): Point {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n    for (let point of points) {\r\n      sumX += point[0];\r\n      sumY += point[1];\r\n    }\r\n    const count = points.length;\r\n    return [sumX / count, sumY / count]; // 计算质心坐标\r\n  }\r\n\r\n  // 计算极角\r\n  calculatePolarAngle(center: Point, point: Point): number {\r\n    const dx = point[0] - center[0];\r\n    const dy = point[1] - center[1];\r\n    return Math.atan2(dy, dx); // 返回的值是 -PI 到 PI\r\n  }\r\n\r\n  // 按极角排序轮廓点\r\n  sortByPolarAngle(points: Point[]): Point[] {\r\n    const center = this.calculateCentroid(points); // 计算质心\r\n    return points.sort((a, b) => {\r\n      const angleA = this.calculatePolarAngle(center, a);\r\n      const angleB = this.calculatePolarAngle(center, b);\r\n      return angleA - angleB; // 从小到大排序（顺时针）\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是图形是否属于嵌套关系 (目前只支持矩形和多边形)\r\n   * @param shape1 标注实例\r\n   * @param shape2 标注实例\r\n   * @returns 布尔值\r\n   */\r\n  isNested(shape1: Rect | Polygon, shape2: Rect | Polygon): boolean {\r\n    return isNested(shape1, shape2);\r\n  }\r\n\r\n  /**\r\n   * 绘制矩形\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawRect(shape: Rect, sub?: Record<string, any>) {\r\n    if (shape.coor.length !== 2) return;\r\n    const {\r\n      strokeStyle,\r\n      fillStyle,\r\n      active,\r\n      creating,\r\n      coor,\r\n      lineWidth,\r\n      labelType\r\n    } = shape;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a: Point) =>\r\n      a.map((b) => Math.round(b * this.scale))\r\n    );\r\n    this.ctx.save();\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    const w = x1 - x0;\r\n    const h = y1 - y0;\r\n    if (!creating) {\r\n      if (labelType === 1) {\r\n        this.ctx.setLineDash([5, 5]);\r\n      } else {\r\n        this.ctx.setLineDash([]);\r\n      }\r\n      this.ctx.fillRect(x0, y0, w, h);\r\n    }\r\n    this.ctx.strokeRect(x0, y0, w, h);\r\n    this.ctx.restore();\r\n    let center = [(coor[1][0] + coor[0][0]) / 2, (coor[1][1] + coor[0][1]) / 2];\r\n    if (labelType === 0) {\r\n      this.drawLabel([coor[0][0], coor[0][1]] as Point, shape, \"top\");\r\n    } else if (labelType === 1) {\r\n      this.drawLabel([coor[1][0], coor[0][1]] as Point, shape, \"top\");\r\n    } else {\r\n      this.drawLabel(center as Point, shape, \"center\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制多边形\r\n   * @param shape 标注实例\r\n   */\r\n  drawPolygon(shape: Polygon) {\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n    this.ctx.save();\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    this.ctx.beginPath();\r\n    coor.forEach((el: Point, i) => {\r\n      const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.ctx.moveTo(x, y);\r\n      } else {\r\n        this.ctx.lineTo(x, y);\r\n      }\r\n    });\r\n    if (creating) {\r\n      const [x, y] = this.mouse || [];\r\n      this.ctx.lineTo(x - this.originX, y - this.originY);\r\n    } else if (coor.length > 2) {\r\n      this.ctx.closePath();\r\n    }\r\n    this.ctx.fill();\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n    this.drawLabel(this.calculateCenter(coor), shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制点\r\n   * @param shape 标注实例\r\n   */\r\n  drawDot(shape: Dot) {\r\n    if (shape.color === \"\") {\r\n      // 关键点\r\n      const { strokeStyle, fillStyle, active, coor, lineWidth } = shape;\r\n      const [x, y] = coor.map((a) => a * this.scale);\r\n      this.ctx.save();\r\n      this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n      this.ctx.fillStyle = active\r\n        ? this.activeFillStyle\r\n        : fillStyle || this.ctrlFillStyle;\r\n      this.ctx.strokeStyle = active\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n      this.ctx.fill();\r\n      this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n      this.ctx.stroke();\r\n      this.ctx.restore();\r\n      this.drawLabel(coor as Point, shape);\r\n    } else {\r\n      // 智能标注点（SAM）\r\n      const { color, coor } = shape;\r\n      const [x, y] = coor.map((a) => a * this.scale);\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, 3, 0, Math.PI * 2);\r\n      this.ctx.fillStyle = `rgba(255, 255, 255, 0.75)`;\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = color;\r\n      this.ctx.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制圆\r\n   * @param shape 标注实例\r\n   */\r\n  drawCirle(shape: Circle) {\r\n    const {\r\n      strokeStyle,\r\n      fillStyle,\r\n      active,\r\n      coor,\r\n      label,\r\n      creating,\r\n      radius,\r\n      ctrlsData,\r\n      lineWidth,\r\n      labelType\r\n    } = shape;\r\n    const [x, y] = coor.map((a) => a * this.scale);\r\n    this.ctx.save();\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    this.ctx.beginPath();\r\n    if (labelType === 1) {\r\n      this.ctx.setLineDash([8, 5]);\r\n    } else {\r\n      this.ctx.setLineDash([]);\r\n    }\r\n    this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n    this.ctx.fill();\r\n    this.ctx.arc(x, y, radius * this.scale, 0, 2 * Math.PI, true);\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n    this.drawLabel(shape.coor as Point, shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制折线\r\n   * @param shape 标注实例\r\n   */\r\n  drawLine(shape: Line) {\r\n    const { strokeStyle, active, creating, coor, lineWidth, labelType } = shape;\r\n    this.ctx.save();\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    if (labelType === 1) {\r\n      this.ctx.setLineDash([5, 5]);\r\n    } else {\r\n      this.ctx.setLineDash([]);\r\n    }\r\n    this.ctx.beginPath();\r\n    coor.forEach((el: Point, i) => {\r\n      const [x, y] = el.map((a) => Math.round(a * this.scale));\r\n      if (i === 0) {\r\n        this.ctx.moveTo(x, y);\r\n      } else {\r\n        this.ctx.lineTo(x, y);\r\n      }\r\n    });\r\n    if (creating) {\r\n      const [x, y] = this.mouse || [];\r\n      this.ctx.lineTo(x - this.originX, y - this.originY);\r\n    }\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n    if (labelType === 0) {\r\n      this.drawLabel(coor[0], shape);\r\n    } else {\r\n      this.drawLabel(coor[1], shape);\r\n    }\r\n  }\r\n\r\n  hexToRGBA(hex: string, alpha = 0.7) {\r\n    // 去掉 # 号\r\n    let hexCode = hex.replace(/^#/, \"\");\r\n\r\n    // 检查输入的 hex 是否是有效的三位或六位颜色代码\r\n    if (\r\n      !/^[A-Fa-f0-9]{3}$/.test(hexCode) &&\r\n      !/^[A-Fa-f0-9]{6}$/.test(hexCode)\r\n    ) {\r\n      return hex;\r\n    }\r\n\r\n    // 如果是三位颜色代码，扩展为六位\r\n    if (hexCode.length === 3) {\r\n      hexCode = hexCode\r\n        .split(\"\")\r\n        .map((char) => char + char)\r\n        .join(\"\");\r\n    }\r\n\r\n    // 将颜色代码拆分为 R, G, B 组件\r\n    const r = parseInt(hexCode.slice(0, 2), 16); // 提取红色部分\r\n    const g = parseInt(hexCode.slice(2, 4), 16); // 提取绿色部分\r\n    const b = parseInt(hexCode.slice(4, 6), 16); // 提取蓝色部分\r\n\r\n    // 返回带有透明度的 RGBA 格式颜色\r\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n  }\r\n\r\n  rgbaToHex(rgba: string, includeAlpha: boolean = false): string {\r\n    // 去掉 rgba 前后的空格和括号\r\n    rgba = rgba.trim().replace(/\\s/g, \"\");\r\n    const rgbaArray = rgba.match(\r\n      /(\\d{1,3}),(\\d{1,3}),(\\d{1,3}),?(\\d+(\\.\\d+)?)?/\r\n    );\r\n\r\n    if (!rgbaArray) {\r\n      return rgba; // 如果输入不是有效的 rgba 格式，返回原字符串\r\n    }\r\n\r\n    const r = parseInt(rgbaArray[1], 10);\r\n    const g = parseInt(rgbaArray[2], 10);\r\n    const b = parseInt(rgbaArray[3], 10);\r\n    const a = rgbaArray[4] ? parseFloat(rgbaArray[4]) : 1.0;\r\n\r\n    // 将 R, G, B 转换为两位的十六进制字符串\r\n    const hexR = r.toString(16).padStart(2, \"0\");\r\n    const hexG = g.toString(16).padStart(2, \"0\");\r\n    const hexB = b.toString(16).padStart(2, \"0\");\r\n\r\n    if (includeAlpha) {\r\n      // 将透明度转换为两位的十六进制字符串\r\n      const hexA = Math.round(a * 255)\r\n        .toString(16)\r\n        .padStart(2, \"0\");\r\n      return `#${hexR}${hexG}${hexB}${hexA}`;\r\n    } else {\r\n      return `#${hexR}${hexG}${hexB}`;\r\n    }\r\n  }\r\n\r\n  isRGBA(color: string): boolean {\r\n    const rgbaRegex =\r\n      /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(0(\\.\\d+)?|1(\\.0+)?)\\)$/;\r\n    return rgbaRegex.test(color);\r\n  }\r\n\r\n  removeDuplicatePoints(\r\n    points: [number, number][],\r\n    getBunding: boolean = false,\r\n    removePoints: boolean = true\r\n  ) {\r\n    const seen = new Set();\r\n    const uniquePoints: [number, number][] = [];\r\n    let maxX = points[0][0],\r\n      minX = points[0][0],\r\n      maxY = points[0][1],\r\n      minY = points[0][1];\r\n\r\n    if (!removePoints) {\r\n      if (getBunding) {\r\n        points.forEach((point) => {\r\n          // 计算最大最小值\r\n          if (point[0] !== -1 && point[1] !== -1) {\r\n            maxX = Math.max(maxX, point[0]);\r\n            maxY = Math.max(maxY, point[1]);\r\n            minX = Math.min(minX, point[0]);\r\n            minY = Math.min(minY, point[1]);\r\n          }\r\n        });\r\n        if (this.activeShape.type === Shape.Brush) {\r\n          return {\r\n            resultRect: [\r\n              minX - this.brushlineWidth / 2,\r\n              minY - this.brushlineWidth / 2,\r\n              maxX - minX + this.brushlineWidth,\r\n              maxY - minY + this.brushlineWidth\r\n            ]\r\n          };\r\n        } else {\r\n          return {\r\n            resultRect: [minX, minY, maxX - minX, maxY - minY]\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      if (getBunding) {\r\n        points.forEach((point) => {\r\n          // 坐标点去重\r\n          const key = `${point[0]},${point[1]}`;\r\n          if (!seen.has(key)) {\r\n            seen.add(key);\r\n            uniquePoints.push(point);\r\n          }\r\n          // 计算最大最小值\r\n          if (getBunding && point[0] !== -1 && point[1] !== -1) {\r\n            maxX = Math.max(maxX, point[0]);\r\n            maxY = Math.max(maxY, point[1]);\r\n            minX = Math.min(minX, point[0]);\r\n            minY = Math.min(minY, point[1]);\r\n          }\r\n        });\r\n        if (this.activeShape.type === Shape.Brush) {\r\n          return {\r\n            resultCoor: uniquePoints,\r\n            resultRect: [\r\n              minX - this.brushlineWidth / 2,\r\n              minY - this.brushlineWidth / 2,\r\n              maxX - minX + this.brushlineWidth,\r\n              maxY - minY + this.brushlineWidth\r\n            ]\r\n          };\r\n        } else {\r\n          return {\r\n            resultCoor: uniquePoints,\r\n            resultRect: [minX, minY, maxX - minX, maxY - minY]\r\n          };\r\n        }\r\n      } else {\r\n        points.forEach((point) => {\r\n          // 坐标点去重\r\n          const key = `${point[0]},${point[1]}`;\r\n          if (!seen.has(key)) {\r\n            seen.add(key);\r\n            uniquePoints.push(point);\r\n          }\r\n        });\r\n        return { resultCoor: uniquePoints };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制轨迹\r\n   * @param shape 轨迹实例\r\n   */\r\n  drawBrush(shape: Brush) {\r\n    const {\r\n      strokeStyle,\r\n      active,\r\n      creating,\r\n      coor,\r\n      lineWidth,\r\n      iseraser,\r\n      boundingRect\r\n    } = shape;\r\n    this.ctx.save();\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineCap = \"round\";\r\n    this.ctx.lineWidth = lineWidth || this.brushlineWidth;\r\n\r\n    // 应用缩放\r\n    this.ctx.scale(this.scale, this.scale);\r\n\r\n    if (coor.length > 1) {\r\n      // 至少两个点才能绘制路径\r\n      if (iseraser) {\r\n        // 设置颜色，包含透明度\r\n        this.ctx.strokeStyle = \"rgba(255, 0, 0, 1)\";\r\n        this.ctx.fillStyle = \"rgba(255, 0, 0, 1)\";\r\n        this.ctx.globalCompositeOperation = \"destination-out\"; // 橡皮擦效果\r\n      } else {\r\n        const color =\r\n          active || creating\r\n            ? this.activeStrokeStyle\r\n            : strokeStyle || this.brushstrokeStyle;\r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.globalCompositeOperation = \"source-over\";\r\n      }\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(coor[0][0], coor[0][1]); // 从第一个点开始\r\n\r\n      for (let i = 1; i < coor.length; i++) {\r\n        this.ctx.lineTo(coor[i][0], coor[i][1]); // 绘制到下一个点\r\n      }\r\n\r\n      this.ctx.stroke();\r\n\r\n      // if (active && this.activeShape.boundingRect.length > 0) {\r\n      //   const [x, y, w, h] = this.activeShape.boundingRect;\r\n      //   this.ctx.lineWidth = 1;\r\n      //   this.ctx.strokeStyle = this.activeStrokeStyle;\r\n      //   this.ctx.beginPath();\r\n      //   this.ctx.strokeRect(x, y, w, h);\r\n      //   this.ctx.stroke();\r\n      // }\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 绘制网格\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawGrid(shape: Grid) {\r\n    if (shape.coor.length !== 2) return;\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n    const [[x0, y0], [x1, y1]] = coor.map((a: Point) =>\r\n      a.map((b) => Math.round(b * this.scale))\r\n    );\r\n    this.ctx.save();\r\n    this.ctx.lineWidth = lineWidth || this.lineWidth;\r\n    this.ctx.fillStyle =\r\n      active || creating ? this.activeFillStyle : fillStyle || this.fillStyle;\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.strokeStyle;\r\n    shape.gridRects.forEach((rect: Rect, m) => {\r\n      this.drawRect(rect, {\r\n        selectedFillStyle:\r\n          shape.selectedFillStyle || this.gridSelectedFillStyle,\r\n        isSelected: shape.selected?.includes(m)\r\n      });\r\n    });\r\n    const w = x1 - x0;\r\n    const h = y1 - y0;\r\n    if (!creating) this.ctx.fillRect(x0, y0, w, h);\r\n    this.ctx.strokeRect(x0, y0, w, h);\r\n    this.ctx.restore();\r\n    this.drawLabel(coor[0], shape);\r\n  }\r\n\r\n  /**\r\n   * 绘制控制点\r\n   * @param point 坐标\r\n   */\r\n  drawCtrl(point: Point) {\r\n    const [x, y] = point.map((a) => a * this.scale);\r\n    this.ctx.save();\r\n    this.ctx.beginPath();\r\n    this.ctx.fillStyle = this.ctrlFillStyle;\r\n    this.ctx.strokeStyle = this.ctrlStrokeStyle;\r\n    this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n    this.ctx.fill();\r\n    this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 绘制控制点列表\r\n   * @param shape 标注实例\r\n   */\r\n  drawCtrlList(shape: Rect | Polygon | Line) {\r\n    shape.ctrlsData.forEach((point, i) => {\r\n      if (\r\n        (shape.type === Shape.Polygon || shape.type === Shape.Line) &&\r\n        (i === this.ctrlIndex || i === this.clickIndex)\r\n      ) {\r\n        this.ctrlStrokeStyle = \"red\";\r\n        this.ctrlRadius = 5;\r\n      } else {\r\n        this.ctrlStrokeStyle = \"#000\";\r\n        this.ctrlRadius = 3;\r\n      }\r\n      if (shape.type === Shape.Circle) {\r\n        if (i === 1) this.drawCtrl(point);\r\n      } else {\r\n        this.drawCtrl(point);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 计算多个坐标的中心位置\r\n  calculateCenter(points: [number, number][]): [number, number] {\r\n    if (points.length === 0) {\r\n      throw new Error(\"Points array cannot be empty.\");\r\n    }\r\n\r\n    const sum = points.reduce(\r\n      (acc, [x, y]) => {\r\n        acc[0] += x; // 累加 x 坐标\r\n        acc[1] += y; // 累加 y 坐标\r\n        return acc;\r\n      },\r\n      [0, 0]\r\n    );\r\n\r\n    const centerX = sum[0] / points.length; // 计算平均 x 坐标\r\n    const centerY = sum[1] / points.length; // 计算平均 y 坐标\r\n\r\n    return [centerX, centerY] as Point; // 返回中心坐标\r\n  }\r\n\r\n  getImagedataFromImageClass = (\r\n    image: HTMLImageElement,\r\n    masktype: string\r\n  ): Uint8ClampedArray | null => {\r\n    // 创建一个临时的 canvas 元素用于处理图像\r\n    const maskCanvas = document.createElement(\"canvas\");\r\n    const maskContext = maskCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true\r\n    });\r\n\r\n    if (!maskCanvas || !maskContext) {\r\n      console.error(\"Canvas or context is not initialized\");\r\n      return null;\r\n    }\r\n\r\n    maskCanvas.width = this.WIDTH;\r\n    maskCanvas.height = this.HEIGHT;\r\n\r\n    // 将图像绘制到临时 canvas 上\r\n    const tmpCanvas = document.createElement(\"canvas\");\r\n    const tmpContext = tmpCanvas.getContext(\"2d\", { willReadFrequently: true });\r\n\r\n    if (!tmpContext) {\r\n      console.error(\"Temporary canvas context is not initialized\");\r\n      return null;\r\n    }\r\n\r\n    tmpCanvas.width = this.WIDTH;\r\n    tmpCanvas.height = this.HEIGHT;\r\n    tmpContext.drawImage(image, 0, 0);\r\n\r\n    let imageData = tmpContext?.getImageData(\r\n      0,\r\n      0,\r\n      tmpCanvas.width,\r\n      tmpCanvas.height\r\n    );\r\n    let pixelData = imageData?.data;\r\n\r\n    if (!pixelData) {\r\n      console.error(\"Failed to retrieve pixel data\");\r\n      return null;\r\n    }\r\n\r\n    // 获取 maskCanvas 的图像数据\r\n    const imageMask = maskContext.getImageData(0, 0, this.WIDTH, this.HEIGHT);\r\n    const maskData = imageMask.data;\r\n\r\n    // 根据 masktype 处理图像数据\r\n    if (masktype === \"everything\") {\r\n      for (let i = 0; i < pixelData.length; i += 4) {\r\n        if (pixelData[i] > 0) {\r\n          const colorIndex = pixelData[i] % this.random_color.length;\r\n          maskData[i] = this.random_color[colorIndex].r; // red\r\n          maskData[i + 1] = this.random_color[colorIndex].g; // green\r\n          maskData[i + 2] = this.random_color[colorIndex].b; // blue\r\n          maskData[i + 3] = this.mask_alpha; // alpha\r\n        }\r\n      }\r\n      maskContext.putImageData(imageMask, 0, 0);\r\n    } else if (masktype === \"rect\") {\r\n    } else if (masktype === \"magic\") {\r\n      let pixels = [];\r\n      // Get the pixel indices of the mask\r\n      for (let i = 0; i < pixelData.length; i += 4) {\r\n        if (\r\n          pixelData[i] == 255 &&\r\n          pixelData[i + 1] == 255 &&\r\n          pixelData[i + 2] == 255\r\n        ) {\r\n          pixels.push(i);\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unknown mask type\");\r\n      return null;\r\n    }\r\n\r\n    // 创建一个新的 canvas 元素并绘制缩放后的图像\r\n    const scaledCanvas = document.createElement(\"canvas\");\r\n    const scaledContext = scaledCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true\r\n    });\r\n\r\n    if (!scaledContext) {\r\n      console.error(\"Scaled canvas context is not initialized\");\r\n      return null;\r\n    }\r\n\r\n    scaledCanvas.width = this.IMAGE_WIDTH;\r\n    scaledCanvas.height = this.IMAGE_HEIGHT;\r\n    scaledContext.drawImage(image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\r\n\r\n    // 获取缩放后的图像数据\r\n    const scaledImageData = scaledContext.getImageData(\r\n      0,\r\n      0,\r\n      this.IMAGE_WIDTH,\r\n      this.IMAGE_HEIGHT\r\n    );\r\n    return scaledImageData.data;\r\n  };\r\n\r\n  putDataOnCanvas(\r\n    thisCanvas: HTMLCanvasElement,\r\n    pixels: number[],\r\n    fillStyle: string,\r\n    putImageData: boolean = true\r\n  ) {\r\n    const thisContext = thisCanvas.getContext(\"2d\", {\r\n      willReadFrequently: true\r\n    });\r\n    if (!thisContext) {\r\n      return;\r\n    }\r\n    const canvasData = thisContext.getImageData(\r\n      this.originX,\r\n      this.originY,\r\n      this.IMAGE_WIDTH,\r\n      this.IMAGE_HEIGHT\r\n    );\r\n    const data = canvasData.data;\r\n    const rgbaRegex = /rgba?\\((\\d+), (\\d+), (\\d+)(?:, ([0-9.]+))?\\)/;\r\n    const replacementColor = fillStyle.match(rgbaRegex);\r\n\r\n    for (let i = 0; i < pixels.length; i += 1) {\r\n      data[pixels[i]] = parseInt(replacementColor[1], 10); // red\r\n      data[pixels[i] + 1] = parseInt(replacementColor[2], 10); // green\r\n      data[pixels[i] + 2] = parseInt(replacementColor[3], 10); // blue\r\n      data[pixels[i] + 3] =\r\n        (replacementColor[4] !== undefined\r\n          ? parseFloat(replacementColor[4])\r\n          : 0.5) * 255; // alpha\r\n    }\r\n    if (putImageData) {\r\n      thisContext.putImageData(canvasData, this.originX, this.originY);\r\n    }\r\n    return canvasData;\r\n  }\r\n\r\n  drawPromptPointOnClick = (\r\n    thisPrompt: MagicPoint,\r\n    canvas: HTMLCanvasElement\r\n  ): void => {\r\n    const x = thisPrompt.coor[0] * this.scale;\r\n    const y = thisPrompt.coor[1] * this.scale;\r\n\r\n    const fillColor = `rgba(255, 255, 255, 0.75)`;\r\n    const strokeColor = thisPrompt.color;\r\n\r\n    const context = canvas.getContext(\"2d\", { willReadFrequently: true });\r\n    if (!context) return;\r\n\r\n    context.beginPath();\r\n    context.arc(x, y, 3, 0, Math.PI * 2);\r\n    context.fillStyle = fillColor;\r\n    context.fill();\r\n    context.strokeStyle = strokeColor;\r\n    context.stroke();\r\n  };\r\n\r\n  /**\r\n   * 高亮Mask\r\n   * @param index Mask的索引\r\n   * @param highlight 是否高亮\r\n   * @returns\r\n   */\r\n  highlightMask(index: number) {\r\n    let activeColor = \"\";\r\n    if (index > -1) {\r\n      const shape = this.dataset[index];\r\n      activeColor = shape.fillStyle.replace(\r\n        /rgba\\((\\d+), (\\d+), (\\d+), (\\d+(\\.\\d+)?)\\)/,\r\n        (match, r, g, b, a) => {\r\n          return `rgba(${r}, ${g}, ${b}, 0.75)`;\r\n        }\r\n      );\r\n      shape.fillStyle = activeColor;\r\n      // this.update();\r\n    } else {\r\n      // let state = false;\r\n      for (let i = 0; i < this.dataset.length; i++) {\r\n        if (this.dataset[i].type === Shape.Mask) {\r\n          activeColor = this.dataset[i].fillStyle.replace(\r\n            /rgba\\((\\d+), (\\d+), (\\d+), (\\d+(\\.\\d+)?)\\)/,\r\n            (match, r, g, b, a) => {\r\n              return `rgba(${r}, ${g}, ${b}, 0.5)`;\r\n            }\r\n          );\r\n          this.dataset[i].fillStyle = activeColor;\r\n          // state = true;\r\n        }\r\n      }\r\n      // if(state){\r\n      //     this.update();\r\n      // }\r\n    }\r\n    this.update(); // 此处，一方面用于更新Mask高亮；另一方面用于更新控制点加粗变红\r\n  }\r\n\r\n  changeMaskPolygon(densityFactor: number) {\r\n    const polygonShape = this.dataset.find(\r\n      (item) => item.uuid === this.activePolygon\r\n    );\r\n    polygonShape.coor = this.getContourPointsOfColoredRegion(\r\n      this.activeCanvasData,\r\n      densityFactor\r\n    );\r\n    this.update();\r\n  }\r\n\r\n  endMagicTool() {\r\n    this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  /**\r\n   * 绘制Mask\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawMask(shape: Mask) {\r\n    if (\r\n      shape.pixels.length !== 0 &&\r\n      shape.height === this.IMAGE_HEIGHT &&\r\n      shape.weight === this.IMAGE_WIDTH\r\n    ) {\r\n      this.putDataOnCanvas(this.canvas, shape.pixels, shape.fillStyle);\r\n      // console.log(shape.pixels);\r\n      return;\r\n    }\r\n    const maskBase64 = shape.maskBase64;\r\n    // 将 base64 转换为图像\r\n    const maskImage = new Image();\r\n    maskImage.crossOrigin = \"Anonymous\";\r\n    maskImage.src = `data:image/png;base64,${maskBase64}`;\r\n\r\n    const self = this;\r\n\r\n    // 处理图像数据\r\n    maskImage.onload = () => {\r\n      if (shape.maskType === \"everything\") {\r\n        const pixelData = self.getImagedataFromImageClass(\r\n          maskImage,\r\n          \"everything\"\r\n        );\r\n\r\n        if (pixelData) {\r\n          const canvasData = self.ctx.getImageData(\r\n            self.originX,\r\n            self.originY,\r\n            self.IMAGE_WIDTH,\r\n            self.IMAGE_HEIGHT\r\n          );\r\n          const data = canvasData.data;\r\n\r\n          // 遍历图像像素并修改对应的颜色\r\n          for (let i = 0; i < pixelData.length; i += 4) {\r\n            if (pixelData[i] > 0) {\r\n              const color =\r\n                self.random_color[pixelData[i] % self.random_color.length];\r\n              data[i] = color.r; // red\r\n              data[i + 1] = color.g; // green\r\n              data[i + 2] = color.b; // blue\r\n              data[i + 3] = this.mask_alpha; // alpha\r\n            }\r\n          }\r\n\r\n          // 更新 canvas 上的图像数据\r\n          self.ctx.putImageData(canvasData, self.originX, self.originY);\r\n        }\r\n      } else if (shape.maskType === \"click\") {\r\n        const pixels: number[] = []; // 保存所有符合条件的像素的索引位置\r\n        const pixelData = self.getImagedataFromImageClass(maskImage, \"magic\");\r\n\r\n        if (pixelData) {\r\n          for (let i = 0; i < pixelData.length; i += 4) {\r\n            if (\r\n              pixelData[i] === 255 &&\r\n              pixelData[i + 1] === 255 &&\r\n              pixelData[i + 2] === 255\r\n            ) {\r\n              pixels.push(i);\r\n            }\r\n          }\r\n\r\n          shape.pixels = pixels;\r\n          shape.height = self.IMAGE_HEIGHT;\r\n          shape.weight = self.IMAGE_WIDTH;\r\n          shape.fillStyle = shape.strokeStyle;\r\n\r\n          shape.canvasData = self.putDataOnCanvas(\r\n            self.canvas,\r\n            pixels,\r\n            shape.fillStyle\r\n          );\r\n        } else {\r\n          console.error(\"Failed to get pixel data from mask image\");\r\n        }\r\n      } else {\r\n      }\r\n    };\r\n  }\r\n\r\n  addPoint() {\r\n    const shape = this.activeShape;\r\n    if (\r\n      Object.keys(shape).length !== 0 &&\r\n      this.clickIndex > -1 &&\r\n      !this.readonly\r\n    ) {\r\n      const [x, y] = this.activeShape.coor[this.clickIndex];\r\n      const nx = Math.round(x + 3);\r\n      const ny = Math.round(y + 3);\r\n      shape.coor.splice(this.clickIndex + 1, 0, [nx, ny]);\r\n      this.clickIndex++;\r\n      this.update();\r\n      this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  deletePoint() {\r\n    const shape = this.activeShape;\r\n    if (\r\n      Object.keys(shape).length !== 0 &&\r\n      shape.coor.length > 3 &&\r\n      this.clickIndex > -1 &&\r\n      !this.readonly\r\n    ) {\r\n      shape.coor.splice(this.clickIndex, 1);\r\n      this.update();\r\n      this.manageDoneList(deepClone(this.dataset));\r\n      this.clickIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 绘制路径线段\r\n   * @param shape 标注实例\r\n   * @returns\r\n   */\r\n  drawPencil(shape: Pencil) {\r\n    const { strokeStyle, fillStyle, active, creating, coor, lineWidth } = shape;\r\n\r\n    // 保存上下文状态\r\n    this.ctx.save();\r\n\r\n    // 设置绘制样式\r\n    this.ctx.lineJoin = \"round\"; // 线条连接处圆角处理\r\n    this.ctx.lineCap = \"round\"; // 线条端点圆角处理\r\n    this.ctx.lineWidth = lineWidth || this.pencillineWidth; // 设置线条宽度\r\n\r\n    // 设置颜色，包含透明度\r\n    this.ctx.strokeStyle =\r\n      active || creating\r\n        ? this.activeStrokeStyle\r\n        : strokeStyle || this.pencilstrokeStyle;\r\n    this.ctx.fillStyle =\r\n      active || creating\r\n        ? this.activeFillStyle\r\n        : fillStyle || this.pencilstrokeStyle;\r\n\r\n    // 应用缩放\r\n    this.ctx.scale(this.scale, this.scale);\r\n\r\n    // 如果有足够的点进行绘制\r\n    if (coor.length > 1) {\r\n      // 检查是否有结束标志点 (-1, -1)\r\n      const hasEndPoint = coor.some(\r\n        (point) => point[0] === -1 && point[1] === -1\r\n      );\r\n\r\n      // 过滤掉结束标志点\r\n      const validCoor = coor.filter(\r\n        (point) => !(point[0] === -1 && point[1] === -1)\r\n      );\r\n\r\n      if (validCoor.length > 1) {\r\n        // 设置全局组合操作\r\n        this.ctx.globalCompositeOperation = \"source-over\"; // 默认绘制模式\r\n\r\n        // 开始路径\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(validCoor[0][0], validCoor[0][1]); // 从第一个点开始\r\n\r\n        // 遍历有效坐标绘制线段\r\n        for (let i = 1; i < validCoor.length; i++) {\r\n          this.ctx.lineTo(validCoor[i][0], validCoor[i][1]); // 绘制到下一个点\r\n        }\r\n\r\n        // 如果有结束标志点，则首尾相连\r\n        if (hasEndPoint) {\r\n          this.ctx.closePath(); // 首尾相连\r\n        }\r\n      }\r\n\r\n      // if (active && this.activeShape.boundingRect.length > 0) {\r\n      //   const [x, y, w, h] = this.activeShape.boundingRect;\r\n      //   this.ctx.lineWidth = 1;\r\n      //   this.ctx.strokeStyle = this.activeStrokeStyle;\r\n      //   this.ctx.strokeRect(x, y, w, h);\r\n      // }\r\n\r\n      // 绘制路径\r\n      this.ctx.stroke();\r\n\r\n      // 如果路径闭合，填充封闭区域\r\n      if (hasEndPoint) {\r\n        this.ctx.clip(); // 限制填充区域到路径范围\r\n        this.ctx.fill();\r\n      }\r\n    }\r\n    // 恢复上下文状态\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 绘制label\r\n   * @param point 位置\r\n   * @param label 文本\r\n   */\r\n  drawLabel(point: Point, shape: AllShape, location: String = \"center\") {\r\n    const {\r\n      label = \"\",\r\n      labelFillStyle = \"\",\r\n      labelFontFamily = \"\",\r\n      textFillStyle = \"\",\r\n      hideLabel,\r\n      labelUp,\r\n      lineWidth,\r\n      coor\r\n    } = shape;\r\n\r\n    if (\r\n      !label.length ||\r\n      (typeof hideLabel === \"boolean\" ? hideLabel : this.hideLabel)\r\n    )\r\n      return;\r\n\r\n    const textPadding = { left: 4, top: 4 };\r\n    const newText =\r\n      label.length <= this.labelMaxLen\r\n        ? label\r\n        : `${label.slice(0, this.labelMaxLen)}...`;\r\n\r\n    // 设置字体缩放比例\r\n    const scaleFactor =\r\n      (this.textscaleStep >= 0 ? 1.1 : 0.9) ** Math.abs(this.textscaleStep);\r\n    this.ctx.font = `${this.labelFontSize * scaleFactor}px ${\r\n      labelFontFamily || \"sans-serif\"\r\n    }`;\r\n\r\n    const textMetrics = this.ctx.measureText(newText);\r\n    const labelWidth = textMetrics.width + textPadding.left * 2;\r\n    const labelHeight = parseInt(this.ctx.font) - 4 + textPadding.top * 2;\r\n\r\n    const currLineWidth = lineWidth || this.lineWidth;\r\n    const isLabelUp = typeof labelUp === \"boolean\" ? labelUp : this.labelUp;\r\n\r\n    const toLeft = this.IMAGE_ORIGIN_WIDTH - point[0] < labelWidth / this.scale;\r\n    const toTop =\r\n      this.IMAGE_ORIGIN_HEIGHT - point[1] < labelHeight / this.scale;\r\n    const toTop2 = point[1] > labelHeight / this.scale;\r\n    const isUp = isLabelUp ? toTop2 : toTop;\r\n\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\r\n\r\n    let [x, y] = point.map((a) => a * this.scale);\r\n\r\n    // 以 point 为中心创建 label\r\n    if ([1, 2, 5].includes(shape.type)) {\r\n      x -= labelWidth / 2;\r\n      if (location === \"top\") {\r\n        y -= labelHeight;\r\n      } else if (location === \"bottom\") {\r\n      } else {\r\n        y -= labelHeight / 2;\r\n      }\r\n    }\r\n\r\n    // 计算矩形位置\r\n    const rectX = toLeft\r\n      ? x - textMetrics.width - textPadding.left + currLineWidth / 2\r\n      : x + currLineWidth / 2;\r\n    const rectY = isUp\r\n      ? y - labelHeight - currLineWidth / 2\r\n      : y + currLineWidth / 2;\r\n\r\n    // 计算缩放后的矩形大小\r\n    const rectWidth = labelWidth;\r\n    const rectHeight = labelHeight;\r\n    this.ctx.fillRect(rectX, rectY, rectWidth, rectHeight);\r\n\r\n    // 设置文本样式\r\n    this.ctx.fillStyle = textFillStyle || this.textFillStyle;\r\n    this.ctx.textBaseline = \"middle\";\r\n\r\n    // 计算文本绘制位置\r\n    const textX = rectX + (rectWidth - textMetrics.width) / 2;\r\n    const textY = rectY + rectHeight / 2;\r\n\r\n    // 绘制文本\r\n    this.ctx.fillText(newText, textX, textY, rectWidth);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * 更新画布\r\n   */\r\n  update(toMask: boolean = false, initSize: boolean = false) {\r\n    window.cancelAnimationFrame(this.timer);\r\n    if (initSize) {\r\n      this.initZoom();\r\n    }\r\n    this.timer = window.requestAnimationFrame(() => {\r\n      this.ctx.save();\r\n      this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\r\n      this.ctx.translate(this.originX, this.originY); // 位置映射，（0,0）对应着（this.originX, this.originY）\r\n      if (this.IMAGE_WIDTH && this.IMAGE_HEIGHT) {\r\n        if (toMask) {\r\n          // 获取图像的像素数据\r\n          const imageData = this.ctx.getImageData(\r\n            0,\r\n            0,\r\n            this.IMAGE_WIDTH,\r\n            this.IMAGE_HEIGHT\r\n          );\r\n          const data = imageData.data;\r\n\r\n          // 将所有像素的 RGB 值设置为 0 (黑色)\r\n          for (let i = 0; i < data.length; i += 4) {\r\n            data[i] = 0; // Red\r\n            data[i + 1] = 0; // Green\r\n            data[i + 2] = 0; // Blue\r\n            data[i + 3] = 255; // alpha\r\n          }\r\n\r\n          // 将修改后的像素数据重新放回画布\r\n          this.ctx.putImageData(imageData, this.originX, this.originY);\r\n        } else {\r\n          // console.log(\"this.imagesrc\", this.image.src);\r\n          // console.log(\"this.image1\", this.image);\r\n          if (!this.image.src.includes(\"undefined\")) {\r\n            if (this.imagealpha === 1) {\r\n              this.ctx.drawImage(\r\n                this.image,\r\n                0,\r\n                0,\r\n                this.IMAGE_WIDTH,\r\n                this.IMAGE_HEIGHT\r\n              );\r\n            } else {\r\n              this.ctx.globalAlpha = this.imagealpha;\r\n              this.ctx.drawImage(\r\n                this.image,\r\n                0,\r\n                0,\r\n                this.IMAGE_WIDTH,\r\n                this.IMAGE_HEIGHT\r\n              );\r\n              this.ctx.globalAlpha = 1.0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 专注模式下，只显示选中图形\r\n      const renderList = this.focusMode\r\n        ? this.activeShape.type\r\n          ? [this.activeShape]\r\n          : []\r\n        : this.dataset;\r\n      for (let i = 0; i < renderList.length; i++) {\r\n        const shape = renderList[i];\r\n        if (shape.hiddening) continue;\r\n        switch (shape.type) {\r\n          case Shape.Rect:\r\n            this.drawRect(shape as Rect);\r\n            break;\r\n          case Shape.Polygon:\r\n            this.drawPolygon(shape as Polygon);\r\n            break;\r\n          case Shape.Dot:\r\n            this.drawDot(shape as Dot);\r\n            break;\r\n          case Shape.Line:\r\n            this.drawLine(shape as Line);\r\n            break;\r\n          case Shape.Circle:\r\n            this.drawCirle(shape as Circle);\r\n            break;\r\n          case Shape.Grid:\r\n            this.drawGrid(shape as Grid);\r\n            break;\r\n          case Shape.Brush:\r\n            this.drawBrush(shape as Brush);\r\n            break;\r\n          case Shape.Mask:\r\n            this.drawMask(shape as Mask);\r\n            break;\r\n          case Shape.Pencil:\r\n            this.drawPencil(shape as Pencil);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      if (\r\n        [\r\n          Shape.Rect,\r\n          Shape.Polygon,\r\n          Shape.Line,\r\n          Shape.Circle,\r\n          Shape.Grid\r\n        ].includes(this.activeShape.type) &&\r\n        !this.activeShape.hiddening\r\n      ) {\r\n        this.drawCtrlList(this.activeShape);\r\n      }\r\n      // 绘制智能标注点\r\n      if (this.magicPoints.length) {\r\n        for (const thisPrompt of this.magicPoints) {\r\n          this.drawPromptPointOnClick(thisPrompt, this.canvas);\r\n        }\r\n      }\r\n      this.ctx.restore();\r\n      this.emit(\"updated\", this.dataset);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 隐藏选中的图形\r\n   */\r\n  hideActiveShape(uuid: string) {\r\n    if (uuid) {\r\n      this.hideList.push(uuid);\r\n      for (let i = 0; i < this.dataset.length; i++) {\r\n        if (this.dataset[i].uuid === uuid) {\r\n          this.dataset[i].hiddening = true;\r\n          this.dataset[i].dragging = false;\r\n          this.dataset[i].active = false;\r\n          break;\r\n        }\r\n      }\r\n      this.update();\r\n      // this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示隐藏的图形\r\n   */\r\n  showHiddenShape() {\r\n    if (this.hideList.length) {\r\n      for (let i = 0; i < this.dataset.length; i++) {\r\n        if (this.dataset[i].uuid === this.hideList[this.hideList.length - 1]) {\r\n          this.dataset[i].hiddening = false;\r\n          this.dataset[i].active = true;\r\n        } else {\r\n          this.dataset[i].active = false;\r\n        }\r\n      }\r\n      this.hideList.pop();\r\n      this.update();\r\n      // this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除指定矩形\r\n   * @param index number\r\n   */\r\n  deleteByIndex(index: number) {\r\n    const num = this.dataset.findIndex((x) => x.index === index);\r\n    if (num > -1) {\r\n      this.emit(\"delete\", this.dataset[num]);\r\n      this.dataset.splice(num, 1);\r\n      this.dataset.forEach((item, i) => {\r\n        item.index = i;\r\n      });\r\n      this.update();\r\n      this.manageDoneList(deepClone(this.dataset));\r\n      // this.manageDoneList(deepClone(this.dataset));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 修改选中图像的标注信息\r\n   * @param tagId string\r\n   * @param label string\r\n   * @param color string\r\n   */\r\n  updateLabelByIndex(\r\n    index: number,\r\n    tagId: string,\r\n    label: string,\r\n    color: string,\r\n    properties: string[]\r\n  ) {\r\n    const updateProperties = (item: any) => {\r\n      properties.forEach((prop) => {\r\n        if (prop === \"label\") {\r\n          item.label = label;\r\n        } else if (prop === \"tagId\") {\r\n          item.tagId = tagId;\r\n        } else if (prop === \"strokeStyle\") {\r\n          // if(item.type === 7 && this.isRGBA(color)){\r\n          //     item.strokeStyle = this.rgbaToHex(color);\r\n          // } else {\r\n          item.strokeStyle = color;\r\n          // }\r\n        } else if (prop === \"textFillStyle\") {\r\n          item.textFillStyle = color;\r\n        } else if (prop === \"fillStyle\") {\r\n          // if(item.type === 7 && this.isRGBA(color)){\r\n          //     item.fillStyle = this.rgbaToHex(color);\r\n          // } else {\r\n          item.fillStyle = color;\r\n          // }\r\n        }\r\n      });\r\n    };\r\n\r\n    if (index !== -1) {\r\n      updateProperties(this.dataset[index]);\r\n      if (this.dataset[index].type === Shape.Pencil) {\r\n        this.emit(\"updateLabel\", this.dataset[index]);\r\n      }\r\n    } else {\r\n      // 注意:不能使用if(this.activeShape)判断，会始终为true\r\n      if (Object.keys(this.activeShape).length !== 0) {\r\n        updateProperties(this.activeShape);\r\n        if (this.activeShape.type === Shape.Pencil) {\r\n          this.emit(\"updateLabel\", this.activeShape);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.update();\r\n    this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  /**\r\n   * 删除画布中创建的所有图形\r\n   * @param index number\r\n   */\r\n  deleteAllShape() {\r\n    this.dataset = [];\r\n    this.update();\r\n    this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  /**\r\n   * 复制指定矩形  水平为x，竖直为y\r\n   * @param index number\r\n   */\r\n  copyByIndex(index: number) {\r\n    const num = this.dataset.findIndex((x) => x.index === index);\r\n    if (num > -1) {\r\n      if (this.activeShape.type === Shape.Rect) {\r\n        const newItem = deepClone(this.dataset[num]); // 深拷贝对象\r\n        const height = newItem.coor[1][1] - newItem.coor[0][1];\r\n        const width = newItem.coor[1][0] - newItem.coor[0][0];\r\n        const [x, y] = this.mouse || [];\r\n        // 鼠标位置未超出图片背景\r\n        if (this.isPointInBackground(this.mouse)) {\r\n          if (\r\n            this.isPointInBackground([\r\n              x + width * this.scale,\r\n              y + height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为左上角，右下角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale + width,\r\n              (y - this.originY) / this.scale + height\r\n            ];\r\n          } else if (\r\n            this.isPointInBackground([\r\n              x - width * this.scale,\r\n              y - height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为右下角，左上角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale - width,\r\n              (y - this.originY) / this.scale - height\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n          } else if (\r\n            this.isPointInBackground([\r\n              x + width * this.scale,\r\n              y - height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为左下角，右上角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale - height\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale + width,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n          } else if (\r\n            this.isPointInBackground([\r\n              x - width * this.scale,\r\n              y + height * this.scale\r\n            ])\r\n          ) {\r\n            // 如果鼠标区域为右上角，左下角未超出\r\n            newItem.coor[0] = [\r\n              (x - this.originX) / this.scale - width,\r\n              (y - this.originY) / this.scale\r\n            ];\r\n            newItem.coor[1] = [\r\n              (x - this.originX) / this.scale,\r\n              (y - this.originY) / this.scale + height\r\n            ];\r\n          } else {\r\n            return;\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        newItem.uuid = createUuid();\r\n        this.dataset.push(newItem); // 添加到 dataset 中\r\n        this.dataset[num].active = false;\r\n        this.dataset.forEach((item, i) => {\r\n          item.index = i;\r\n        });\r\n        this.update();\r\n        this.manageDoneList(deepClone(this.dataset));\r\n      } else if (this.activeShape.type === Shape.Dot) {\r\n        const newItem = deepClone(this.dataset[num]);\r\n        const [x, y] = this.mouse || [];\r\n        if (this.isPointInBackground(this.mouse)) {\r\n          newItem.coor[0] = (x - this.originX) / this.scale;\r\n          newItem.coor[1] = (y - this.originY) / this.scale;\r\n          // 防止位置重叠\r\n          if (\r\n            newItem.coor[0] == this.dataset[num].coor[0] &&\r\n            newItem.coor[1] == this.dataset[num].coor[1]\r\n          ) {\r\n            newItem.coor[0] += 2;\r\n            newItem.coor[1] += 2;\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        newItem.uuid = createUuid();\r\n        this.dataset.push(newItem); // 添加到 dataset 中\r\n        this.dataset[num].active = false;\r\n        this.dataset.forEach((item, i) => {\r\n          item.index = i;\r\n        });\r\n        this.update();\r\n        this.manageDoneList(deepClone(this.dataset));\r\n      } else if (this.activeShape.type === Shape.Circle) {\r\n        const newItem = new Circle(\r\n          {\r\n            ...this.dataset[num], // 复制所有简单属性\r\n            coor: [...this.dataset[num].coor], // 深拷贝数组\r\n            radius: this.activeShape.radius // 深拷贝 radius\r\n          },\r\n          this.dataset[num].index\r\n        );\r\n        const [x, y] = this.mouse || [];\r\n        if (this.isPointInBackground(this.mouse)) {\r\n          newItem.coor[0] = (x - this.originX) / this.scale;\r\n          newItem.coor[1] = (y - this.originY) / this.scale;\r\n          let point1: Point = [x - newItem.radius, y]; //左顶点\r\n          let point2: Point = [x + newItem.radius, y]; //右顶点\r\n          let point3: Point = [x, y - newItem.radius]; //上顶点\r\n          let point4: Point = [x, y + newItem.radius]; //下顶点\r\n          if (!this.isPointInBackground(point1)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale + newItem.radius;\r\n            newItem.coor[1] = (y - this.originY) / this.scale;\r\n            if (!this.isPointInBackground(point2)) {\r\n              return;\r\n            }\r\n          }\r\n          if (!this.isPointInBackground(point2)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale - newItem.radius;\r\n            newItem.coor[1] = (y - this.originY) / this.scale;\r\n            if (!this.isPointInBackground(point1)) {\r\n              return;\r\n            }\r\n          }\r\n          if (!this.isPointInBackground(point3)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale;\r\n            newItem.coor[1] = (y - this.originY) / this.scale + newItem.radius;\r\n            if (!this.isPointInBackground(point4)) {\r\n              return;\r\n            }\r\n          }\r\n          if (!this.isPointInBackground(point4)) {\r\n            newItem.coor[0] = (x - this.originX) / this.scale;\r\n            newItem.coor[1] = (y - this.originY) / this.scale - newItem.radius;\r\n            if (!this.isPointInBackground(point3)) {\r\n              return;\r\n            }\r\n          }\r\n        } else {\r\n          return;\r\n        }\r\n        newItem.uuid = createUuid();\r\n        this.dataset.push(newItem); // 添加到 dataset 中\r\n        this.dataset[num].active = false;\r\n        this.dataset.forEach((item, i) => {\r\n          item.index = i;\r\n        });\r\n        this.update();\r\n        this.manageDoneList(deepClone(this.dataset));\r\n        return;\r\n      } else if (this.activeShape.type === Shape.Line) {\r\n        return;\r\n      } else if (this.activeShape.type === Shape.Polygon) {\r\n        return;\r\n      } else if (this.activeShape.type === Shape.Grid) {\r\n        return;\r\n      } else if (this.activeShape.type === Shape.None) {\r\n        return;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算缩放步长\r\n   */\r\n  // calcStep(flag = \"\") {\r\n  //   console.log(\"calcStep\");\r\n  //   // 如果图片小于指定的宽高，且 flag 为空或 'b'，执行放大操作\r\n  //   if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\r\n  //     if (flag === \"\" || flag === \"b\") {\r\n  //       this.setScale(true, false, true); // 执行放大\r\n  //       // 仅在没有递归过的情况下才继续递归\r\n  //       if (flag !== \"b\") {\r\n  //         this.calcStep(\"b\"); // 递归调用，避免重复递归\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   // 如果图片大于指定的宽高，且 flag 为空或 's'，执行缩小操作\r\n  //   if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\r\n  //     if (flag === \"\" || flag === \"s\") {\r\n  //       this.setScale(false, false, true); // 执行缩小\r\n  //       // 仅在没有递归过的情况下才继续递归\r\n  //       if (flag !== \"s\") {\r\n  //         this.calcStep(\"s\"); // 递归调用，避免重复递归\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return;\r\n  // }\r\n  calcStep(flag = \"\") {\r\n    if (this.IMAGE_WIDTH < this.WIDTH && this.IMAGE_HEIGHT < this.HEIGHT) {\r\n      if (flag === \"\" || flag === \"b\") {\r\n        this.setScale(true, false, true);\r\n        this.calcStep(\"b\");\r\n      }\r\n    }\r\n    if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\r\n      if (flag === \"\" || flag === \"s\") {\r\n        this.setScale(false, false, true);\r\n        this.calcStep(\"s\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 缩放\r\n   * @param type true放大5%，false缩小5%\r\n   * @param center 缩放中心 center|mouse\r\n   * @param pure 不绘制\r\n   */\r\n  setScale(type: boolean, byMouse = false, pure = false) {\r\n    if (this.lock) return;\r\n    if (\r\n      (!type && this.imageMin < this.MIN_LENGTH) ||\r\n      (type && this.IMAGE_WIDTH > this.imageOriginMax * 10)\r\n    )\r\n      return;\r\n    if (type) {\r\n      this.scaleStep++;\r\n    } else {\r\n      this.scaleStep--;\r\n    }\r\n    let realToLeft = 0;\r\n    let realToRight = 0;\r\n    const [x, y] = this.mouse || [];\r\n    if (byMouse) {\r\n      realToLeft = (x - this.originX) / this.scale;\r\n      realToRight = (y - this.originY) / this.scale;\r\n    }\r\n    const abs = Math.abs(this.scaleStep);\r\n    const width = this.IMAGE_WIDTH;\r\n    this.IMAGE_WIDTH = Math.round(\r\n      this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.1 : 0.9) ** abs\r\n    );\r\n    this.IMAGE_HEIGHT = Math.round(\r\n      this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.1 : 0.9) ** abs\r\n    );\r\n    if (byMouse) {\r\n      this.originX = x - realToLeft * this.scale;\r\n      this.originY = y - realToRight * this.scale;\r\n    } else {\r\n      const scale = this.IMAGE_WIDTH / width;\r\n      this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\r\n      this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\r\n    }\r\n    this.emit(\"scale\", { type: type, byMouse: byMouse, pure: pure });\r\n    if (!pure) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 适配背景图\r\n   */\r\n  fitZoom() {\r\n    this.calcStep();\r\n    if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\r\n      this.IMAGE_WIDTH =\r\n        this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\r\n      this.IMAGE_HEIGHT = this.HEIGHT;\r\n    } else {\r\n      this.IMAGE_WIDTH = this.WIDTH;\r\n      this.IMAGE_HEIGHT =\r\n        this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\r\n    }\r\n    this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\r\n    this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\r\n    this.textscaleStep = 0;\r\n    this.emit(\"fitZoom\");\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n   * 恢复为原始图片尺寸\r\n   */\r\n  initZoom() {\r\n    // this.calcStep();\r\n    this.IMAGE_WIDTH = this.IMAGE_ORIGIN_WIDTH;\r\n    this.IMAGE_HEIGHT = this.IMAGE_ORIGIN_HEIGHT;\r\n    this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\r\n    this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\r\n    this.textscaleStep = 0;\r\n    // this.update();\r\n  }\r\n\r\n  /**\r\n   * 设置专注模式\r\n   * @param type {boolean}\r\n   */\r\n  setFocusMode(type: boolean) {\r\n    this.focusMode = type;\r\n    this.update();\r\n    // this.manageDoneList(deepClone(this.dataset));\r\n  }\r\n\r\n  manageDoneList(dataset: AllShape[]) {\r\n    this.doneList.push(dataset);\r\n    if (this.doneList.length > this.MAX_LENGTH) {\r\n      this.doneList.shift();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 撤销操作（目前不支持撤销隐藏、显示、专注等模式和状态切换）\r\n   * 若支持，需要设置一个操作数组，每次往doneList中push时，记录下操作类型。撤销时，执行相应的逆方法\r\n   */\r\n  undo() {\r\n    if (this.doneList.length > 1) {\r\n      this.clickIndex = -1; // 重置点击索引\r\n      const lastDoneItem = this.doneList[this.doneList.length - 1];\r\n      this.undoList.push(lastDoneItem);\r\n      this.doneList.pop();\r\n      const newShapes = deepClone(this.doneList[this.doneList.length - 1]);\r\n      this.setData(newShapes, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重做操作\r\n   */\r\n  redo() {\r\n    if (this.undoList.length > 0) {\r\n      this.clickIndex = -1; // 重置点击索引\r\n      const lastDoneItem = this.undoList[this.undoList.length - 1];\r\n      this.manageDoneList(lastDoneItem);\r\n      this.undoList.pop();\r\n      const newShapes = deepClone(this.doneList[this.doneList.length - 1]);\r\n      this.setData(newShapes, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁\r\n   */\r\n  destroy() {\r\n    if (!this.canvas) return;\r\n    this.image.removeEventListener(\"load\", this.handleLoad);\r\n    this.canvas.removeEventListener(\"contextmenu\", this.handleContextmenu);\r\n    this.canvas.removeEventListener(\"mousewheel\", this.handleMousewheel);\r\n    this.canvas.removeEventListener(\"wheel\", this.handleMousewheel);\r\n    this.canvas.removeEventListener(\"mousedown\", this.handleMouseDown);\r\n    this.canvas.removeEventListener(\"touchstart\", this.handleMouseDown);\r\n    this.canvas.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    this.canvas.removeEventListener(\"touchmove\", this.handleMouseMove);\r\n    this.canvas.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    this.canvas.removeEventListener(\"touchend\", this.handleMouseUp);\r\n    this.canvas.removeEventListener(\"dblclick\", this.handleDblclick);\r\n    document.body.removeEventListener(\"keydown\", this.handleKeydown, true);\r\n    document.body.removeEventListener(\"keyup\", this.handleKeyup, true);\r\n    this.canvas.width = this.WIDTH;\r\n    this.canvas.height = this.HEIGHT;\r\n    this.canvas.style.width = null;\r\n    this.canvas.style.height = null;\r\n    this.canvas.style.userSelect = null;\r\n  }\r\n\r\n  /**\r\n   * 重新设置画布大小\r\n   */\r\n  resize(\r\n    width: number,\r\n    height: number,\r\n    alpha: number = 1,\r\n    imageurl: string = \"\"\r\n  ) {\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.canvas.style.width = String(width) + \"px\";\r\n    this.canvas.style.height = String(height) + \"px\";\r\n    if (imageurl !== \"\" || this.imagesrc === undefined) {\r\n      this.imagesrc = imageurl;\r\n    }\r\n    this.setImage(this.imagesrc, alpha);\r\n    this.initSetting();\r\n    this.update();\r\n  }\r\n}\r\n","import Shape from \"./Shape\";\r\n\r\nexport default class Rect extends Shape {\r\n  public type = 1;\r\n  public iscontour = false;\r\n  constructor(item: any, index: number) {\r\n    super(item, index);\r\n    // this.iscontour = item.iscontour || this.iscontour // 智能标注框\r\n    // this.labelType = item.labelType || this.labelType; // 标签文字显示位置\r\n  }\r\n  get ctrlsData() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    return [\r\n      [x0, y0],\r\n      [x0 + (x1 - x0) / 2, y0],\r\n      [x1, y0],\r\n      [x1, y0 + (y1 - y0) / 2],\r\n      [x1, y1],\r\n      [x0 + (x1 - x0) / 2, y1],\r\n      [x0, y1],\r\n      [x0, y0 + (y1 - y0) / 2]\r\n    ];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Polygon extends Shape {\r\n  public type = 2\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 2 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Dot extends Shape {\r\n    public type = 3\r\n    public color = '' // 智能标注（SAM）时，green左键加点，red右键加点，''表示关键点（非智能标注点）\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n        this.color = item.color || this.color\r\n    }\r\n}\r\n","export default class EventBus {\r\n    private _eventTree: Record<string, any> = {}\r\n    /**\r\n   * 注册事件\r\n   * @param eventName 事件名称\r\n   * @param cb 回调方法\r\n   */\r\n    on(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.push(cb);\r\n        } else {\r\n            this._eventTree[eventName] = [cb];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发事件\r\n     * @param eventName 事件名称\r\n     * @param payload 传递参数\r\n     */\r\n    emit(eventName: string, ...payload: any) {\r\n        const fns = this._eventTree[eventName];\r\n        if (Array.isArray(fns)) {\r\n            fns.forEach((fn) => fn(...payload));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 注销事件\r\n     * @param eventName 事件名称\r\n     * @param cb 传递参数\r\n     */\r\n    off(eventName: string, cb: Function) {\r\n        const fns = this._eventTree[eventName];\r\n        const index = fns.find((fn: Function) => fn === cb);\r\n        if (Array.isArray(fns) && index) {\r\n            fns.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","import Shape from \"./Shape\";\r\n\r\nexport default class Line extends Shape {\r\n  public type = 4;\r\n\r\n  constructor(item: any, index: number) {\r\n    super(item, index);\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 1 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\n\r\nexport default class Circle extends Shape {\r\n    public type = 5\r\n    public radius = 0\r\n    constructor(item: any, index: number) {\r\n        super(item, index)\r\n        this.radius = item.radius || this.radius\r\n    }\r\n    get ctrlsData() {\r\n        const [x, y] = this.coor\r\n        return [\r\n            [x, y - this.radius],\r\n            [x + this.radius, y],\r\n            [x, y + this.radius],\r\n            [x - this.radius, y]\r\n        ]\r\n    }\r\n}\r\n","import Shape from './Shape';\r\nimport Rect from './Rect'\r\n\r\nexport default class Grid extends Shape {\r\n  public type = 6\r\n  public row = 1\r\n  public col = 1\r\n  public selected: number[] = []\r\n  public selectedFillStyle: string\r\n\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n    this.row = item.row > 0 ? item.row : this.row\r\n    this.col = item.col > 0 ? item.col : this.col\r\n    this.selected = Array.isArray(item.selected) ? item.selected : []\r\n  }\r\n\r\n  get ctrlsData() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    return [\r\n      [x0, y0],\r\n      [x0 + (x1 - x0) / 2, y0],\r\n      [x1, y0],\r\n      [x1, y0 + (y1 - y0) / 2],\r\n      [x1, y1],\r\n      [x0 + (x1 - x0) / 2, y1],\r\n      [x0, y1],\r\n      [x0, y0 + (y1 - y0) / 2],\r\n    ];\r\n  }\r\n\r\n  get gridRects() {\r\n    const [[x0, y0], [x1, y1]] = this.coor;\r\n    const { row, col, strokeStyle, fillStyle, active, creating, lineWidth } = this;\r\n    const w = (x1 - x0) / this.col;\r\n    const h = (y1 - y0) / this.row;\r\n    const list: Rect[] = []\r\n    for (let i = 0; i < row; i++) {\r\n      for (let j = 0; j < col; j++) {\r\n        const startPoint = [x0 + j * w, y0 + i * h];\r\n        const index = i * col + j;\r\n        const shape = new Rect({\r\n          coor: [startPoint, [startPoint[0] + w, startPoint[1] + h]],\r\n          strokeStyle, fillStyle, active, creating, lineWidth\r\n        }, index);\r\n        list.push(shape)\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n}\r\n","import Shape from \"./Shape\";\r\n\r\nexport default class Brush extends Shape {\r\n  public type = 7;\r\n  public brushWidth: number = 1;\r\n  public iseraser = false;\r\n  public boundingRect: number[] = [];\r\n  constructor(item: any, index: number) {\r\n    super(item, index);\r\n    this.iseraser = item.iseraser || this.iseraser;\r\n    this.boundingRect = item.boundingRect || this.boundingRect;\r\n  }\r\n\r\n  get ctrlsData() {\r\n    return this.coor.length > 3 ? this.coor : [];\r\n  }\r\n}\r\n","import Shape from './Shape';\r\ninterface MagicPoint {\r\n  coor: [number, number];\r\n  color: string;\r\n}\r\n\r\nexport default class Mask extends Shape {\r\n  public type = 8\r\n  public maskType = '' //everything || click || reat\r\n  public maskBase64 = ''\r\n  public pixels :number[] = []\r\n  public canvasData :ImageData = null \r\n  // public rectcoor = ''\r\n  public height = 0\r\n  public weight = 0\r\n  public maskToPolygon = false\r\n  public magicPoints : MagicPoint[] = []\r\n  constructor(item: any, index: number) {\r\n    super(item, index)\r\n    this.maskType = item.maskType || ''\r\n    this.maskBase64 = item.maskBase64 || ''\r\n    this.pixels = item.pixels || []\r\n    this.canvasData = item.canvasData || null\r\n    this.height = item.height || 0\r\n    this.weight = item.weight || 0\r\n    // this.rectcoor = item.rectcoor || this.rectcoor\r\n    this.maskToPolygon = item.maskToPolygon || false\r\n    this.magicPoints = item.magicPoints || []\r\n  }\r\n\r\n}\r\n","import Shape from \"./Shape\";\r\n\r\nexport default class Line extends Shape {\r\n  public type = 9;\r\n  public boundingRect: number[] = [];\r\n  constructor(item: any, index: number) {\r\n    super(item, index);\r\n    this.boundingRect = item.boundingRect || this.boundingRect;\r\n  }\r\n  get ctrlsData() {\r\n    return this.coor.length > 3 ? this.coor : [];\r\n  }\r\n}\r\n"],"names":["createUuid","s","hexDigits","i","m","Math","floor","random","slice","n","join","isPointInPolygon","x","y","vertices","inside","length","j","xi","yi","xj","yj","deepClone","obj","hash","WeakMap","has","get","ImageData","newImageData","Uint8ClampedArray","data","width","height","set","Date","getTime","RegExp","source","flags","Map","result_1","forEach","value","key","Set","result_2","add","Array","isArray","result_3","item","index","result","Object","create","getPrototypeOf","Reflect","ownKeys","deepEqual","obj1","obj2","keysToCompare","type","maskKeysToCompare_1","__values","maskKeysToCompare_1_1","done","next","keys1","keys","keys1_1","keys1_1_1","Shape","this","tagId","label","labelId","labelType","truncated","coor","active","creating","dragging","hiddening","locking","uuid","assign","Rect","_super","_this","call","iscontour","__extends","defineProperty","prototype","_a","__read","_b","x0","y0","_c","x1","y1","Polygon","Dot","color","EventBus","_eventTree","on","eventName","cb","fns","push","emit","payload","_i","arguments","fn","apply","__spreadArray","off","find","splice","Line","Circle","radius","Grid","row","col","selected","_d","strokeStyle","fillStyle","lineWidth","w","h","list","startPoint","shape","Brush","brushWidth","iseraser","boundingRect","Mask","maskType","maskBase64","pixels","canvasData","weight","maskToPolygon","magicPoints","CanvasSelect","el","src","version","pkg","lock","readonly","MIN_WIDTH","MIN_HEIGHT","MIN_RADIUS","MIN_POINTNUM","MIN_LENGTH","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","hideLabel","labelFillStyle","labelFontFamily","labelFontSize","textFillStyle","labelMaxLen","WIDTH","HEIGHT","imagesrc","imagealpha","olddataset","dataset","MAX_LENGTH","doneList","undoList","hideList","remmberOrigin","createType","None","ctrlIndex","clickIndex","image","Image","IMAGE_WIDTH","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","originX","originY","scaleStep","textscaleStep","scrollZoom","dblTouch","dblTouchStore","alpha","focusMode","scaleTouchStore","isTouch2","isMobile","navigator","userAgent","includes","labelUp","isCtrlKey","ctrlCode","gridMenuEnable","gridSelectedFillStyle","ispainting","brushlineWidth","brushstrokeStyle","pencillineWidth","pencilstrokeStyle","mask_alpha","densityFactor","activeCanvasData","activePolygon","isEraser","isErasing","eraserPoints","eraserSize","random_color","r","g","b","isMagicToolActive","maxLinePointCount","getImagedataFromImageClass","masktype","maskCanvas","document","createElement","maskContext","getContext","willReadFrequently","console","error","tmpCanvas","tmpContext","drawImage","imageData","getImageData","pixelData","imageMask","maskData","colorIndex","putImageData","scaledCanvas","scaledContext","drawPromptPointOnClick","thisPrompt","canvas","scale","strokeColor","context","beginPath","arc","PI","fill","stroke","handleLoad","bind","handleContextmenu","handleMousewheel","handleMouseDown","handleMouseMove","handleMouseUp","handleDblclick","handleKeyup","handleKeydown","container","querySelector","HTMLCanvasElement","offScreen","initSetting","initEvents","setImage","red","green","blue","warn","IMAGE_ORIGIN_WIDTH","min","max","mergeEvent","e","mouseX","mouseY","mouseCX","mouseCY","touches","clientX","clientY","target","getBoundingClientRect","left","top_1","top","round","clientX1","_e","clientY1","abs","offsetX","offsetY","__assign","fitZoom","preventDefault","evt","stopPropagation","mouse","deltaY","imageMin","imageOriginMax","setScale","buttons","ctrls","activeShape","ctrlsData","findIndex","isPointInCircle","log","update","remmber","isInBackground","nx","ny","hitOnShape","hitShapeIndex_1","hitShape","Pencil","pt","sort","a","newShape","curPoint","sp","rowCol","prompt","_f","split","test","Number","_g","_h","a0","b0","_j","a1","b1","concat","newPoint","newRadius","noLimit","_k","t1","tar","_l","sqrt","pow","which","touch0","touch1","cur","now","pop","removeDuplicatePoints","resultCoor","resultRect","manageDoneList","canPolygon","canLine","gridRects","rect","isPointInRect","thisIndex","code","activeElement","body","deleteByIndex","copyByIndex","dpr","window","devicePixelRatio","style","userSelect","ctx","clientWidth","clientHeight","offScreenCtx","addEventListener","removeEventListener","getscaledPoint","url","crossOrigin","handleMaskShape","tempshape","maskImage","Promise","resolve","reject","onload","putDataOnCanvas","polygonShape","getContourPointsOfColoredRegion","onerror","err","setData","needCreate","toMask","initSize","setTimeout","__awaiter","initdata","itemIndexMap_1","data_1","data_1_1","toString","undefined","mousePoint","hitShapeIndex","isPointInBackground","isPointInLine","isMouseInPixelsRegion","hitOnShapeVertex","point","pointX","pointY","map","isPointOnRectEdge","onLeftEdge","onRightEdge","onTopEdge","onBottomEdge","isPointOnRectVertex","onLeftTopPoint","onRightBottomEdge","onRightTopEdge","onLeftBottomEdge","save","clearRect","translate","moveTo","lineTo","closePath","areaData","restore","isPointOnPolygonVertex","some","center","isPointOnCircleVertex","getBoundingBoxOfColoredRegion","xMin","xMax","yMin","yMax","contourPoints","isBorderPoint","uniquePoints","sampledPoints","samplePointsByDensity","sortByPolarAngle","directions_1","directions_1_1","dx","dy","points","step","calculateCentroid","sumX","sumY","points_1","points_1_1","count","calculatePolarAngle","atan2","isNested","shape1","shape2","x2","y2","x3","y3","x4","y4","vertices1","vertices2","_m","drawRect","sub","setLineDash","fillRect","strokeRect","drawLabel","drawPolygon","lineJoin","calculateCenter","drawDot","drawCirle","drawLine","hexToRGBA","hex","hexCode","replace","char","parseInt","rgbaToHex","rgba","includeAlpha","rgbaArray","trim","match","parseFloat","hexR","padStart","hexG","hexB","hexA","isRGBA","getBunding","removePoints","seen","maxX","minX","maxY","minY","drawBrush","lineCap","globalCompositeOperation","drawGrid","selectedFillStyle","isSelected","drawCtrl","drawCtrlList","Error","sum","reduce","acc","thisCanvas","thisContext","replacementColor","highlightMask","activeColor","changeMaskPolygon","endMagicTool","drawMask","self","addPoint","deletePoint","drawPencil","hasEndPoint","validCoor","filter","clip","location","textPadding","newText","scaleFactor","font","textMetrics","measureText","labelWidth","labelHeight","currLineWidth","isLabelUp","toLeft","toTop","toTop2","isUp","rectX","rectY","rectWidth","rectHeight","textBaseline","textX","textY","fillText","cancelAnimationFrame","timer","initZoom","requestAnimationFrame","globalAlpha","renderList","hideActiveShape","showHiddenShape","num","updateLabelByIndex","properties","updateProperties","prop","deleteAllShape","newItem","point1","point2","point3","point4","calcStep","flag","byMouse","pure","realToLeft","realToRight","setFocusMode","shift","undo","lastDoneItem","newShapes","redo","destroy","resize","imageurl","String"],"mappings":"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"}